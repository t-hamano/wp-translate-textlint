(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[39],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/elm.js":
/*!***********************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/elm.js ***!
  \***********************************************************/
/*! exports provided: elm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"elm\", function() { return elm; });\nfunction switchState(source, setState, f)\n{\n  setState(f);\n  return f(source, setState);\n}\n\nvar lowerRE = /[a-z]/;\nvar upperRE = /[A-Z]/;\nvar innerRE = /[a-zA-Z0-9_]/;\n\nvar digitRE = /[0-9]/;\nvar hexRE = /[0-9A-Fa-f]/;\nvar symbolRE = /[-&*+.\\\\/<>=?^|:]/;\nvar specialRE = /[(),[\\]{}]/;\nvar spacesRE = /[ \\v\\f]/; // newlines are handled in tokenizer\n\nfunction normal()\n{\n  return function(source, setState)\n  {\n    if (source.eatWhile(spacesRE))\n    {\n      return null;\n    }\n\n    var char = source.next();\n\n    if (specialRE.test(char))\n    {\n      return (char === '{' && source.eat('-'))\n        ? switchState(source, setState, chompMultiComment(1))\n        : (char === '[' && source.match('glsl|'))\n        ? switchState(source, setState, chompGlsl)\n        : 'builtin';\n    }\n\n    if (char === '\\'')\n    {\n      return switchState(source, setState, chompChar);\n    }\n\n    if (char === '\"')\n    {\n      return source.eat('\"')\n        ? source.eat('\"')\n        ? switchState(source, setState, chompMultiString)\n        : 'string'\n      : switchState(source, setState, chompSingleString);\n    }\n\n    if (upperRE.test(char))\n    {\n      source.eatWhile(innerRE);\n      return 'type';\n    }\n\n    if (lowerRE.test(char))\n    {\n      var isDef = source.pos === 1;\n      source.eatWhile(innerRE);\n      return isDef ? \"def\" : \"variable\";\n    }\n\n    if (digitRE.test(char))\n    {\n      if (char === '0')\n      {\n        if (source.eat(/[xX]/))\n        {\n          source.eatWhile(hexRE); // should require at least 1\n          return \"number\";\n        }\n      }\n      else\n      {\n        source.eatWhile(digitRE);\n      }\n      if (source.eat('.'))\n      {\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      if (source.eat(/[eE]/))\n      {\n        source.eat(/[-+]/);\n        source.eatWhile(digitRE); // should require at least 1\n      }\n      return \"number\";\n    }\n\n    if (symbolRE.test(char))\n    {\n      if (char === '-' && source.eat('-'))\n      {\n        source.skipToEnd();\n        return \"comment\";\n      }\n      source.eatWhile(symbolRE);\n      return \"keyword\";\n    }\n\n    if (char === '_')\n    {\n      return \"keyword\";\n    }\n\n    return \"error\";\n  }\n}\n\nfunction chompMultiComment(nest)\n{\n  if (nest == 0)\n  {\n    return normal();\n  }\n  return function(source, setState)\n  {\n    while (!source.eol())\n    {\n      var char = source.next();\n      if (char == '{' && source.eat('-'))\n      {\n        ++nest;\n      }\n      else if (char == '-' && source.eat('}'))\n      {\n        --nest;\n        if (nest === 0)\n        {\n          setState(normal());\n          return 'comment';\n        }\n      }\n    }\n    setState(chompMultiComment(nest));\n    return 'comment';\n  }\n}\n\nfunction chompMultiString(source, setState)\n{\n  while (!source.eol())\n  {\n    var char = source.next();\n    if (char === '\"' && source.eat('\"') && source.eat('\"'))\n    {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\n\nfunction chompSingleString(source, setState)\n{\n  while (source.skipTo('\\\\\"')) { source.next(); source.next(); }\n  if (source.skipTo('\"'))\n  {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\n\nfunction chompChar(source, setState)\n{\n  while (source.skipTo(\"\\\\'\")) { source.next(); source.next(); }\n  if (source.skipTo(\"'\"))\n  {\n    source.next();\n    setState(normal());\n    return 'string';\n  }\n  source.skipToEnd();\n  setState(normal());\n  return 'error';\n}\n\nfunction chompGlsl(source, setState)\n{\n  while (!source.eol())\n  {\n    var char = source.next();\n    if (char === '|' && source.eat(']'))\n    {\n      setState(normal());\n      return 'string';\n    }\n  }\n  return 'string';\n}\n\nvar wellKnownWords = {\n  case: 1,\n  of: 1,\n  as: 1,\n  if: 1,\n  then: 1,\n  else: 1,\n  let: 1,\n    in: 1,\n  type: 1,\n  alias: 1,\n  module: 1,\n  where: 1,\n  import: 1,\n  exposing: 1,\n  port: 1\n};\n\nconst elm = {\n  startState: function ()  { return { f: normal() }; },\n  copyState:  function (s) { return { f: s.f }; },\n\n  token: function(stream, state) {\n    var type = state.f(stream, function(s) { state.f = s; });\n    var word = stream.current();\n    return (wellKnownWords.hasOwnProperty(word)) ? 'keyword' : type;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvZWxtLmpzPzEyZWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQix5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQ0FBZ0MsZUFBZSxlQUFlO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQ0FBZ0MsZUFBZSxlQUFlO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUCw0QkFBNEIsU0FBUyxlQUFlLEVBQUU7QUFDdEQsNEJBQTRCLFNBQVMsVUFBVSxFQUFFOztBQUVqRDtBQUNBLDRDQUE0QyxhQUFhLEVBQUU7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvZWxtLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gc3dpdGNoU3RhdGUoc291cmNlLCBzZXRTdGF0ZSwgZilcbntcbiAgc2V0U3RhdGUoZik7XG4gIHJldHVybiBmKHNvdXJjZSwgc2V0U3RhdGUpO1xufVxuXG52YXIgbG93ZXJSRSA9IC9bYS16XS87XG52YXIgdXBwZXJSRSA9IC9bQS1aXS87XG52YXIgaW5uZXJSRSA9IC9bYS16QS1aMC05X10vO1xuXG52YXIgZGlnaXRSRSA9IC9bMC05XS87XG52YXIgaGV4UkUgPSAvWzAtOUEtRmEtZl0vO1xudmFyIHN5bWJvbFJFID0gL1stJiorLlxcXFwvPD49P158Ol0vO1xudmFyIHNwZWNpYWxSRSA9IC9bKCksW1xcXXt9XS87XG52YXIgc3BhY2VzUkUgPSAvWyBcXHZcXGZdLzsgLy8gbmV3bGluZXMgYXJlIGhhbmRsZWQgaW4gdG9rZW5pemVyXG5cbmZ1bmN0aW9uIG5vcm1hbCgpXG57XG4gIHJldHVybiBmdW5jdGlvbihzb3VyY2UsIHNldFN0YXRlKVxuICB7XG4gICAgaWYgKHNvdXJjZS5lYXRXaGlsZShzcGFjZXNSRSkpXG4gICAge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNoYXIgPSBzb3VyY2UubmV4dCgpO1xuXG4gICAgaWYgKHNwZWNpYWxSRS50ZXN0KGNoYXIpKVxuICAgIHtcbiAgICAgIHJldHVybiAoY2hhciA9PT0gJ3snICYmIHNvdXJjZS5lYXQoJy0nKSlcbiAgICAgICAgPyBzd2l0Y2hTdGF0ZShzb3VyY2UsIHNldFN0YXRlLCBjaG9tcE11bHRpQ29tbWVudCgxKSlcbiAgICAgICAgOiAoY2hhciA9PT0gJ1snICYmIHNvdXJjZS5tYXRjaCgnZ2xzbHwnKSlcbiAgICAgICAgPyBzd2l0Y2hTdGF0ZShzb3VyY2UsIHNldFN0YXRlLCBjaG9tcEdsc2wpXG4gICAgICAgIDogJ2J1aWx0aW4nO1xuICAgIH1cblxuICAgIGlmIChjaGFyID09PSAnXFwnJylcbiAgICB7XG4gICAgICByZXR1cm4gc3dpdGNoU3RhdGUoc291cmNlLCBzZXRTdGF0ZSwgY2hvbXBDaGFyKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhciA9PT0gJ1wiJylcbiAgICB7XG4gICAgICByZXR1cm4gc291cmNlLmVhdCgnXCInKVxuICAgICAgICA/IHNvdXJjZS5lYXQoJ1wiJylcbiAgICAgICAgPyBzd2l0Y2hTdGF0ZShzb3VyY2UsIHNldFN0YXRlLCBjaG9tcE11bHRpU3RyaW5nKVxuICAgICAgICA6ICdzdHJpbmcnXG4gICAgICA6IHN3aXRjaFN0YXRlKHNvdXJjZSwgc2V0U3RhdGUsIGNob21wU2luZ2xlU3RyaW5nKTtcbiAgICB9XG5cbiAgICBpZiAodXBwZXJSRS50ZXN0KGNoYXIpKVxuICAgIHtcbiAgICAgIHNvdXJjZS5lYXRXaGlsZShpbm5lclJFKTtcbiAgICAgIHJldHVybiAndHlwZSc7XG4gICAgfVxuXG4gICAgaWYgKGxvd2VyUkUudGVzdChjaGFyKSlcbiAgICB7XG4gICAgICB2YXIgaXNEZWYgPSBzb3VyY2UucG9zID09PSAxO1xuICAgICAgc291cmNlLmVhdFdoaWxlKGlubmVyUkUpO1xuICAgICAgcmV0dXJuIGlzRGVmID8gXCJkZWZcIiA6IFwidmFyaWFibGVcIjtcbiAgICB9XG5cbiAgICBpZiAoZGlnaXRSRS50ZXN0KGNoYXIpKVxuICAgIHtcbiAgICAgIGlmIChjaGFyID09PSAnMCcpXG4gICAgICB7XG4gICAgICAgIGlmIChzb3VyY2UuZWF0KC9beFhdLykpXG4gICAgICAgIHtcbiAgICAgICAgICBzb3VyY2UuZWF0V2hpbGUoaGV4UkUpOyAvLyBzaG91bGQgcmVxdWlyZSBhdCBsZWFzdCAxXG4gICAgICAgICAgcmV0dXJuIFwibnVtYmVyXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2VcbiAgICAgIHtcbiAgICAgICAgc291cmNlLmVhdFdoaWxlKGRpZ2l0UkUpO1xuICAgICAgfVxuICAgICAgaWYgKHNvdXJjZS5lYXQoJy4nKSlcbiAgICAgIHtcbiAgICAgICAgc291cmNlLmVhdFdoaWxlKGRpZ2l0UkUpOyAvLyBzaG91bGQgcmVxdWlyZSBhdCBsZWFzdCAxXG4gICAgICB9XG4gICAgICBpZiAoc291cmNlLmVhdCgvW2VFXS8pKVxuICAgICAge1xuICAgICAgICBzb3VyY2UuZWF0KC9bLStdLyk7XG4gICAgICAgIHNvdXJjZS5lYXRXaGlsZShkaWdpdFJFKTsgLy8gc2hvdWxkIHJlcXVpcmUgYXQgbGVhc3QgMVxuICAgICAgfVxuICAgICAgcmV0dXJuIFwibnVtYmVyXCI7XG4gICAgfVxuXG4gICAgaWYgKHN5bWJvbFJFLnRlc3QoY2hhcikpXG4gICAge1xuICAgICAgaWYgKGNoYXIgPT09ICctJyAmJiBzb3VyY2UuZWF0KCctJykpXG4gICAgICB7XG4gICAgICAgIHNvdXJjZS5za2lwVG9FbmQoKTtcbiAgICAgICAgcmV0dXJuIFwiY29tbWVudFwiO1xuICAgICAgfVxuICAgICAgc291cmNlLmVhdFdoaWxlKHN5bWJvbFJFKTtcbiAgICAgIHJldHVybiBcImtleXdvcmRcIjtcbiAgICB9XG5cbiAgICBpZiAoY2hhciA9PT0gJ18nKVxuICAgIHtcbiAgICAgIHJldHVybiBcImtleXdvcmRcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJlcnJvclwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNob21wTXVsdGlDb21tZW50KG5lc3QpXG57XG4gIGlmIChuZXN0ID09IDApXG4gIHtcbiAgICByZXR1cm4gbm9ybWFsKCk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKHNvdXJjZSwgc2V0U3RhdGUpXG4gIHtcbiAgICB3aGlsZSAoIXNvdXJjZS5lb2woKSlcbiAgICB7XG4gICAgICB2YXIgY2hhciA9IHNvdXJjZS5uZXh0KCk7XG4gICAgICBpZiAoY2hhciA9PSAneycgJiYgc291cmNlLmVhdCgnLScpKVxuICAgICAge1xuICAgICAgICArK25lc3Q7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChjaGFyID09ICctJyAmJiBzb3VyY2UuZWF0KCd9JykpXG4gICAgICB7XG4gICAgICAgIC0tbmVzdDtcbiAgICAgICAgaWYgKG5lc3QgPT09IDApXG4gICAgICAgIHtcbiAgICAgICAgICBzZXRTdGF0ZShub3JtYWwoKSk7XG4gICAgICAgICAgcmV0dXJuICdjb21tZW50JztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzZXRTdGF0ZShjaG9tcE11bHRpQ29tbWVudChuZXN0KSk7XG4gICAgcmV0dXJuICdjb21tZW50JztcbiAgfVxufVxuXG5mdW5jdGlvbiBjaG9tcE11bHRpU3RyaW5nKHNvdXJjZSwgc2V0U3RhdGUpXG57XG4gIHdoaWxlICghc291cmNlLmVvbCgpKVxuICB7XG4gICAgdmFyIGNoYXIgPSBzb3VyY2UubmV4dCgpO1xuICAgIGlmIChjaGFyID09PSAnXCInICYmIHNvdXJjZS5lYXQoJ1wiJykgJiYgc291cmNlLmVhdCgnXCInKSlcbiAgICB7XG4gICAgICBzZXRTdGF0ZShub3JtYWwoKSk7XG4gICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgfVxuICB9XG4gIHJldHVybiAnc3RyaW5nJztcbn1cblxuZnVuY3Rpb24gY2hvbXBTaW5nbGVTdHJpbmcoc291cmNlLCBzZXRTdGF0ZSlcbntcbiAgd2hpbGUgKHNvdXJjZS5za2lwVG8oJ1xcXFxcIicpKSB7IHNvdXJjZS5uZXh0KCk7IHNvdXJjZS5uZXh0KCk7IH1cbiAgaWYgKHNvdXJjZS5za2lwVG8oJ1wiJykpXG4gIHtcbiAgICBzb3VyY2UubmV4dCgpO1xuICAgIHNldFN0YXRlKG5vcm1hbCgpKTtcbiAgICByZXR1cm4gJ3N0cmluZyc7XG4gIH1cbiAgc291cmNlLnNraXBUb0VuZCgpO1xuICBzZXRTdGF0ZShub3JtYWwoKSk7XG4gIHJldHVybiAnZXJyb3InO1xufVxuXG5mdW5jdGlvbiBjaG9tcENoYXIoc291cmNlLCBzZXRTdGF0ZSlcbntcbiAgd2hpbGUgKHNvdXJjZS5za2lwVG8oXCJcXFxcJ1wiKSkgeyBzb3VyY2UubmV4dCgpOyBzb3VyY2UubmV4dCgpOyB9XG4gIGlmIChzb3VyY2Uuc2tpcFRvKFwiJ1wiKSlcbiAge1xuICAgIHNvdXJjZS5uZXh0KCk7XG4gICAgc2V0U3RhdGUobm9ybWFsKCkpO1xuICAgIHJldHVybiAnc3RyaW5nJztcbiAgfVxuICBzb3VyY2Uuc2tpcFRvRW5kKCk7XG4gIHNldFN0YXRlKG5vcm1hbCgpKTtcbiAgcmV0dXJuICdlcnJvcic7XG59XG5cbmZ1bmN0aW9uIGNob21wR2xzbChzb3VyY2UsIHNldFN0YXRlKVxue1xuICB3aGlsZSAoIXNvdXJjZS5lb2woKSlcbiAge1xuICAgIHZhciBjaGFyID0gc291cmNlLm5leHQoKTtcbiAgICBpZiAoY2hhciA9PT0gJ3wnICYmIHNvdXJjZS5lYXQoJ10nKSlcbiAgICB7XG4gICAgICBzZXRTdGF0ZShub3JtYWwoKSk7XG4gICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgfVxuICB9XG4gIHJldHVybiAnc3RyaW5nJztcbn1cblxudmFyIHdlbGxLbm93bldvcmRzID0ge1xuICBjYXNlOiAxLFxuICBvZjogMSxcbiAgYXM6IDEsXG4gIGlmOiAxLFxuICB0aGVuOiAxLFxuICBlbHNlOiAxLFxuICBsZXQ6IDEsXG4gICAgaW46IDEsXG4gIHR5cGU6IDEsXG4gIGFsaWFzOiAxLFxuICBtb2R1bGU6IDEsXG4gIHdoZXJlOiAxLFxuICBpbXBvcnQ6IDEsXG4gIGV4cG9zaW5nOiAxLFxuICBwb3J0OiAxXG59O1xuXG5leHBvcnQgY29uc3QgZWxtID0ge1xuICBzdGFydFN0YXRlOiBmdW5jdGlvbiAoKSAgeyByZXR1cm4geyBmOiBub3JtYWwoKSB9OyB9LFxuICBjb3B5U3RhdGU6ICBmdW5jdGlvbiAocykgeyByZXR1cm4geyBmOiBzLmYgfTsgfSxcblxuICB0b2tlbjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgIHZhciB0eXBlID0gc3RhdGUuZihzdHJlYW0sIGZ1bmN0aW9uKHMpIHsgc3RhdGUuZiA9IHM7IH0pO1xuICAgIHZhciB3b3JkID0gc3RyZWFtLmN1cnJlbnQoKTtcbiAgICByZXR1cm4gKHdlbGxLbm93bldvcmRzLmhhc093blByb3BlcnR5KHdvcmQpKSA/ICdrZXl3b3JkJyA6IHR5cGU7XG4gIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@codemirror/legacy-modes/mode/elm.js\n");

/***/ })

}]);