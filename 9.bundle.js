(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{199:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "verilog", function() { return verilog; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tlv", function() { return tlv; });\nfunction mkVerilog(parserConfig) {\n\n  var statementIndentUnit = parserConfig.statementIndentUnit,\n      dontAlignCalls = parserConfig.dontAlignCalls,\n      noIndentKeywords = parserConfig.noIndentKeywords || [],\n      multiLineStrings = parserConfig.multiLineStrings,\n      hooks = parserConfig.hooks || {};\n\n  function words(str) {\n    var obj = {}, words = str.split(" ");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  /**\n   * Keywords from IEEE 1800-2012\n   */\n  var keywords = words(\n    "accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind " +\n      "bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config " +\n      "const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable " +\n      "dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup " +\n      "endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask " +\n      "enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin " +\n      "function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import " +\n      "incdir include initial inout input inside instance int integer interconnect interface intersect join join_any " +\n      "join_none large let liblist library local localparam logic longint macromodule matches medium modport module " +\n      "nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed " +\n      "parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup " +\n      "pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg " +\n      "reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime " +\n      "s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify " +\n      "specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on " +\n      "table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior " +\n      "trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void " +\n      "wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor");\n\n  /** Operators from IEEE 1800-2012\n      unary_operator ::=\n      + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n      binary_operator ::=\n      + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **\n      | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<\n      | -> | <->\n      inc_or_dec_operator ::= ++ | --\n      unary_module_path_operator ::=\n      ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~\n      binary_module_path_operator ::=\n      == | != | && | || | & | | | ^ | ^~ | ~^\n  */\n  var isOperatorChar = /[\\+\\-\\*\\/!~&|^%=?:]/;\n  var isBracketChar = /[\\[\\]{}()]/;\n\n  var unsignedNumber = /\\d[0-9_]*/;\n  var decimalLiteral = /\\d*\\s*\'s?d\\s*\\d[0-9_]*/i;\n  var binaryLiteral = /\\d*\\s*\'s?b\\s*[xz01][xz01_]*/i;\n  var octLiteral = /\\d*\\s*\'s?o\\s*[xz0-7][xz0-7_]*/i;\n  var hexLiteral = /\\d*\\s*\'s?h\\s*[0-9a-fxz?][0-9a-fxz?_]*/i;\n  var realLiteral = /(\\d[\\d_]*(\\.\\d[\\d_]*)?E-?[\\d_]+)|(\\d[\\d_]*\\.\\d[\\d_]*)/i;\n\n  var closingBracketOrWord = /^((\\w+)|[)}\\]])/;\n  var closingBracket = /[)}\\]]/;\n\n  var curPunc;\n  var curKeyword;\n\n  // Block openings which are closed by a matching keyword in the form of ("end" + keyword)\n  // E.g. "task" => "endtask"\n  var blockKeywords = words(\n    "case checker class clocking config function generate interface module package " +\n      "primitive program property specify sequence table task"\n  );\n\n  // Opening/closing pairs\n  var openClose = {};\n  for (var keyword in blockKeywords) {\n    openClose[keyword] = "end" + keyword;\n  }\n  openClose["begin"] = "end";\n  openClose["casex"] = "endcase";\n  openClose["casez"] = "endcase";\n  openClose["do"   ] = "while";\n  openClose["fork" ] = "join;join_any;join_none";\n  openClose["covergroup"] = "endgroup";\n\n  for (var i in noIndentKeywords) {\n    var keyword = noIndentKeywords[i];\n    if (openClose[keyword]) {\n      openClose[keyword] = undefined;\n    }\n  }\n\n  // Keywords which open statements that are ended with a semi-colon\n  var statementKeywords = words("always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while");\n\n  function tokenBase(stream, state) {\n    var ch = stream.peek(), style;\n    if (hooks[ch] && (style = hooks[ch](stream, state)) != false) return style;\n    if (hooks.tokenBase && (style = hooks.tokenBase(stream, state)) != false)\n      return style;\n\n    if (/[,;:\\.]/.test(ch)) {\n      curPunc = stream.next();\n      return null;\n    }\n    if (isBracketChar.test(ch)) {\n      curPunc = stream.next();\n      return "bracket";\n    }\n    // Macros (tick-defines)\n    if (ch == \'`\') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        return "def";\n      } else {\n        return null;\n      }\n    }\n    // System calls\n    if (ch == \'$\') {\n      stream.next();\n      if (stream.eatWhile(/[\\w\\$_]/)) {\n        return "meta";\n      } else {\n        return null;\n      }\n    }\n    // Time literals\n    if (ch == \'#\') {\n      stream.next();\n      stream.eatWhile(/[\\d_.]/);\n      return "def";\n    }\n    // Strings\n    if (ch == \'"\') {\n      stream.next();\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    // Comments\n    if (ch == "/") {\n      stream.next();\n      if (stream.eat("*")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      }\n      if (stream.eat("/")) {\n        stream.skipToEnd();\n        return "comment";\n      }\n      stream.backUp(1);\n    }\n\n    // Numeric literals\n    if (stream.match(realLiteral) ||\n        stream.match(decimalLiteral) ||\n        stream.match(binaryLiteral) ||\n        stream.match(octLiteral) ||\n        stream.match(hexLiteral) ||\n        stream.match(unsignedNumber) ||\n        stream.match(realLiteral)) {\n      return "number";\n    }\n\n    // Operators\n    if (stream.eatWhile(isOperatorChar)) {\n      return "meta";\n    }\n\n    // Keywords / plain variables\n    if (stream.eatWhile(/[\\w\\$_]/)) {\n      var cur = stream.current();\n      if (keywords[cur]) {\n        if (openClose[cur]) {\n          curPunc = "newblock";\n        }\n        if (statementKeywords[cur]) {\n          curPunc = "newstatement";\n        }\n        curKeyword = cur;\n        return "keyword";\n      }\n      return "variable";\n    }\n\n    stream.next();\n    return null;\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == "\\\\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return "string";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == "/" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == "*");\n    }\n    return "comment";\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    var indent = state.indented;\n    var c = new Context(indent, col, type, null, state.context);\n    return state.context = c;\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == ")" || t == "]" || t == "}") {\n      state.indented = state.context.indented;\n    }\n    return state.context = state.context.prev;\n  }\n\n  function isClosing(text, contextClosing) {\n    if (text == contextClosing) {\n      return true;\n    } else {\n      // contextClosing may be multiple keywords separated by ;\n      var closingKeywords = contextClosing.split(";");\n      for (var i in closingKeywords) {\n        if (text == closingKeywords[i]) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  function buildElectricInputRegEx() {\n    // Reindentation should occur on any bracket char: {}()[]\n    // or on a match of any of the block closing keywords, at\n    // the end of a line\n    var allClosings = [];\n    for (var i in openClose) {\n      if (openClose[i]) {\n        var closings = openClose[i].split(";");\n        for (var j in closings) {\n          allClosings.push(closings[j]);\n        }\n      }\n    }\n    var re = new RegExp("[{}()\\\\[\\\\]]|(" + allClosings.join("|") + ")$");\n    return re;\n  }\n\n  // Interface\n  return {\n    startState: function(indentUnit) {\n      var state = {\n        tokenize: null,\n        context: new Context(-indentUnit, 0, "top", false),\n        indented: 0,\n        startOfLine: true\n      };\n      if (hooks.startState) hooks.startState(state);\n      return state;\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (hooks.token) {\n        // Call hook, with an optional return value of a style to override verilog styling.\n        var style = hooks.token(stream, state);\n        if (style !== undefined) {\n          return style;\n        }\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      curKeyword = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == "comment" || style == "meta" || style == "variable") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if (curPunc == ctx.type) {\n        popContext(state);\n      } else if ((curPunc == ";" && ctx.type == "statement") ||\n                 (ctx.type && isClosing(curKeyword, ctx.type))) {\n        ctx = popContext(state);\n        while (ctx && ctx.type == "statement") ctx = popContext(state);\n      } else if (curPunc == "{") {\n        pushContext(state, stream.column(), "}");\n      } else if (curPunc == "[") {\n        pushContext(state, stream.column(), "]");\n      } else if (curPunc == "(") {\n        pushContext(state, stream.column(), ")");\n      } else if (ctx && ctx.type == "endcase" && curPunc == ":") {\n        pushContext(state, stream.column(), "statement");\n      } else if (curPunc == "newstatement") {\n        pushContext(state, stream.column(), "statement");\n      } else if (curPunc == "newblock") {\n        if (curKeyword == "function" && ctx && (ctx.type == "statement" || ctx.type == "endgroup")) {\n          // The \'function\' keyword can appear in some other contexts where it actually does not\n          // indicate a function (import/export DPI and covergroup definitions).\n          // Do nothing in this case\n        } else if (curKeyword == "task" && ctx && ctx.type == "statement") {\n          // Same thing for task\n        } else {\n          var close = openClose[curKeyword];\n          pushContext(state, stream.column(), close);\n        }\n      }\n\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return null;\n      if (hooks.indent) {\n        var fromHook = hooks.indent(state);\n        if (fromHook >= 0) return fromHook;\n      }\n      var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n      if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;\n      var closing = false;\n      var possibleClosing = textAfter.match(closingBracketOrWord);\n      if (possibleClosing)\n        closing = isClosing(possibleClosing[0], ctx.type);\n      if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit || cx.unit);\n      else if (closingBracket.test(ctx.type) && ctx.align && !dontAlignCalls) return ctx.column + (closing ? 0 : 1);\n      else if (ctx.type == ")" && !closing) return ctx.indented + (statementIndentUnit || cx.unit);\n      else return ctx.indented + (closing ? 0 : cx.unit);\n    },\n\n    languageData: {\n      indentOnInput: buildElectricInputRegEx(),\n      commentTokens: {line: "//", block: {open: "/*", close: "*/"}}\n    }\n  };\n};\n\nconst verilog = mkVerilog({})\n\n// TL-Verilog mode.\n// See tl-x.org for language spec.\n// See the mode in action at makerchip.com.\n// Contact: steve.hoover@redwoodeda.com\n\n// TLV Identifier prefixes.\n// Note that sign is not treated separately, so "+/-" versions of numeric identifiers\n// are included.\nvar tlvIdentifierStyle = {\n  "|": "link",\n  ">": "property",  // Should condition this off for > TLV 1c.\n  "$": "variable",\n  "$$": "variable",\n  "?$": "qualifier",\n  "?*": "qualifier",\n  "-": "contentSeparator",\n  "/": "property",\n  "/-": "property",\n  "@": "variableName.special",\n  "@-": "variableName.special",\n  "@++": "variableName.special",\n  "@+=": "variableName.special",\n  "@+=-": "variableName.special",\n  "@--": "variableName.special",\n  "@-=": "variableName.special",\n  "%+": "tag",\n  "%-": "tag",\n  "%": "tag",\n  ">>": "tag",\n  "<<": "tag",\n  "<>": "tag",\n  "#": "tag",  // Need to choose a style for this.\n  "^": "attribute",\n  "^^": "attribute",\n  "^!": "attribute",\n  "*": "variable",\n  "**": "variable",\n  "\\\\": "keyword",\n  "\\"": "comment"\n};\n\n// Lines starting with these characters define scope (result in indentation).\nvar tlvScopePrefixChars = {\n  "/": "beh-hier",\n  ">": "beh-hier",\n  "-": "phys-hier",\n  "|": "pipe",\n  "?": "when",\n  "@": "stage",\n  "\\\\": "keyword"\n};\nvar tlvIndentUnit = 3;\nvar tlvTrackStatements = false;\nvar tlvIdentMatch = /^([~!@#\\$%\\^&\\*-\\+=\\?\\/\\\\\\|\'"<>]+)([\\d\\w_]*)/;  // Matches an identifier.\n// Note that \':\' is excluded, because of it\'s use in [:].\nvar tlvLineIndentationMatch = /^[! ] */;\nvar tlvCommentMatch = /^\\/[\\/\\*]/;\n\nconst tlv = mkVerilog({\n  hooks: {\n    electricInput: false,\n\n    // Return undefined for verilog tokenizing, or style for TLV token (null not used).\n    // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting\n    // can be enabled with the definition of cm-tlv-* styles, including highlighting for:\n    //   - M4 tokens\n    //   - TLV scope indentation\n    //   - Statement delimitation (enabled by tlvTrackStatements)\n    token: function(stream, state) {\n      var style = undefined;\n      var match;  // Return value of pattern matches.\n\n      // Set highlighting mode based on code region (TLV or SV).\n      if (stream.sol() && ! state.tlvInBlockComment) {\n        // Process region.\n        if (stream.peek() == \'\\\\\') {\n          style = "def";\n          stream.skipToEnd();\n          if (stream.string.match(/\\\\SV/)) {\n            state.tlvCodeActive = false;\n          } else if (stream.string.match(/\\\\TLV/)){\n            state.tlvCodeActive = true;\n          }\n        }\n        // Correct indentation in the face of a line prefix char.\n        if (state.tlvCodeActive && stream.pos == 0 &&\n            (state.indented == 0) && (match = stream.match(tlvLineIndentationMatch, false))) {\n          state.indented = match[0].length;\n        }\n\n        // Compute indentation state:\n        //   o Auto indentation on next line\n        //   o Indentation scope styles\n        var indented = state.indented;\n        var depth = indented / tlvIndentUnit;\n        if (depth <= state.tlvIndentationStyle.length) {\n          // not deeper than current scope\n\n          var blankline = stream.string.length == indented;\n          var chPos = depth * tlvIndentUnit;\n          if (chPos < stream.string.length) {\n            var bodyString = stream.string.slice(chPos);\n            var ch = bodyString[0];\n            if (tlvScopePrefixChars[ch] && ((match = bodyString.match(tlvIdentMatch)) &&\n                                            tlvIdentifierStyle[match[1]])) {\n              // This line begins scope.\n              // Next line gets indented one level.\n              indented += tlvIndentUnit;\n              // Style the next level of indentation (except non-region keyword identifiers,\n              //   which are statements themselves)\n              if (!(ch == "\\\\" && chPos > 0)) {\n                state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch];\n                if (tlvTrackStatements) {state.statementComment = false;}\n                depth++;\n              }\n            }\n          }\n          // Clear out deeper indentation levels unless line is blank.\n          if (!blankline) {\n            while (state.tlvIndentationStyle.length > depth) {\n              state.tlvIndentationStyle.pop();\n            }\n          }\n        }\n        // Set next level of indentation.\n        state.tlvNextIndent = indented;\n      }\n\n      if (state.tlvCodeActive) {\n        // Highlight as TLV.\n\n        var beginStatement = false;\n        if (tlvTrackStatements) {\n          // This starts a statement if the position is at the scope level\n          // and we\'re not within a statement leading comment.\n          beginStatement =\n            (stream.peek() != " ") &&   // not a space\n            (style === undefined) &&    // not a region identifier\n            !state.tlvInBlockComment && // not in block comment\n            //!stream.match(tlvCommentMatch, false) && // not comment start\n          (stream.column() == state.tlvIndentationStyle.length * tlvIndentUnit);  // at scope level\n          if (beginStatement) {\n            if (state.statementComment) {\n              // statement already started by comment\n              beginStatement = false;\n            }\n            state.statementComment =\n              stream.match(tlvCommentMatch, false); // comment start\n          }\n        }\n\n        var match;\n        if (style !== undefined) {\n        } else if (state.tlvInBlockComment) {\n          // In a block comment.\n          if (stream.match(/^.*?\\*\\//)) {\n            // Exit block comment.\n            state.tlvInBlockComment = false;\n            if (tlvTrackStatements && !stream.eol()) {\n              // Anything after comment is assumed to be real statement content.\n              state.statementComment = false;\n            }\n          } else {\n            stream.skipToEnd();\n          }\n          style = "comment";\n        } else if ((match = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {\n          // Start comment.\n          if (match[0] == "//") {\n            // Line comment.\n            stream.skipToEnd();\n          } else {\n            // Block comment.\n            state.tlvInBlockComment = true;\n          }\n          style = "comment";\n        } else if (match = stream.match(tlvIdentMatch)) {\n          // looks like an identifier (or identifier prefix)\n          var prefix = match[1];\n          var mnemonic = match[2];\n          if (// is identifier prefix\n            tlvIdentifierStyle.hasOwnProperty(prefix) &&\n              // has mnemonic or we\'re at the end of the line (maybe it hasn\'t been typed yet)\n            (mnemonic.length > 0 || stream.eol())) {\n            style = tlvIdentifierStyle[prefix];\n          } else {\n            // Just swallow one character and try again.\n            // This enables subsequent identifier match with preceding symbol character, which\n            //   is legal within a statement.  (Eg, !$reset).  It also enables detection of\n            //   comment start with preceding symbols.\n            stream.backUp(stream.current().length - 1);\n          }\n        } else if (stream.match(/^\\t+/)) {\n          // Highlight tabs, which are illegal.\n          style = "invalid";\n        } else if (stream.match(/^[\\[\\]{}\\(\\);\\:]+/)) {\n          // [:], (), {}, ;.\n          style = "meta";\n        } else if (match = stream.match(/^[mM]4([\\+_])?[\\w\\d_]*/)) {\n          // m4 pre proc\n          style = (match[1] == "+") ? "keyword.special" : "keyword";\n        } else if (stream.match(/^ +/)){\n          // Skip over spaces.\n          if (stream.eol()) {\n            // Trailing spaces.\n            style = "error";\n          }\n        } else if (stream.match(/^[\\w\\d_]+/)) {\n          // alpha-numeric token.\n          style = "number";\n        } else {\n          // Eat the next char w/ no formatting.\n          stream.next();\n        }\n      } else {\n        if (stream.match(/^[mM]4([\\w\\d_]*)/)) {\n          // m4 pre proc\n          style = "keyword";\n        }\n      }\n      return style;\n    },\n\n    indent: function(state) {\n      return (state.tlvCodeActive == true) ? state.tlvNextIndent : -1;\n    },\n\n    startState: function(state) {\n      state.tlvIndentationStyle = [];  // Styles to use for each level of indentation.\n      state.tlvCodeActive = true;  // True when we\'re in a TLV region (and at beginning of file).\n      state.tlvNextIndent = -1;    // The number of spaces to autoindent the next line if tlvCodeActive.\n      state.tlvInBlockComment = false;  // True inside /**/ comment.\n      if (tlvTrackStatements) {\n        state.statementComment = false;  // True inside a statement\'s header comment.\n      }\n    }\n\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvdmVyaWxvZy5qcz9mZDQ1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0I7QUFDaEIsbUJBQW1CLGtCQUFrQjtBQUNyQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5Q0FBeUM7QUFDekMsMkJBQTJCOztBQUUzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsU0FBUztBQUN0Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFdBQVc7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU8sd0JBQXdCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLE9BQU8sdUJBQXVCO0FBQzlCLDhDQUE4QztBQUM5QyxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekU7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0Esc0JBQXNCLG9CQUFvQjtBQUMxQztBQUNBO0FBQ0E7O0FBRU8sNEJBQTRCOztBQUVuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0Y7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUyxnQ0FBZ0MsS0FBSztBQUM5Qyx3QkFBd0IsR0FBRztBQUMzQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLHFDQUFxQztBQUNyQyxpQ0FBaUM7QUFDakMsK0JBQStCO0FBQy9CLHNDQUFzQztBQUN0QztBQUNBLHVDQUF1QztBQUN2QztBQUNBOztBQUVBO0FBQ0EsQ0FBQyIsImZpbGUiOiIxOTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBta1Zlcmlsb2cocGFyc2VyQ29uZmlnKSB7XG5cbiAgdmFyIHN0YXRlbWVudEluZGVudFVuaXQgPSBwYXJzZXJDb25maWcuc3RhdGVtZW50SW5kZW50VW5pdCxcbiAgICAgIGRvbnRBbGlnbkNhbGxzID0gcGFyc2VyQ29uZmlnLmRvbnRBbGlnbkNhbGxzLFxuICAgICAgbm9JbmRlbnRLZXl3b3JkcyA9IHBhcnNlckNvbmZpZy5ub0luZGVudEtleXdvcmRzIHx8IFtdLFxuICAgICAgbXVsdGlMaW5lU3RyaW5ncyA9IHBhcnNlckNvbmZpZy5tdWx0aUxpbmVTdHJpbmdzLFxuICAgICAgaG9va3MgPSBwYXJzZXJDb25maWcuaG9va3MgfHwge307XG5cbiAgZnVuY3Rpb24gd29yZHMoc3RyKSB7XG4gICAgdmFyIG9iaiA9IHt9LCB3b3JkcyA9IHN0ci5zcGxpdChcIiBcIik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3Jkcy5sZW5ndGg7ICsraSkgb2JqW3dvcmRzW2ldXSA9IHRydWU7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIC8qKlxuICAgKiBLZXl3b3JkcyBmcm9tIElFRUUgMTgwMC0yMDEyXG4gICAqL1xuICB2YXIga2V5d29yZHMgPSB3b3JkcyhcbiAgICBcImFjY2VwdF9vbiBhbGlhcyBhbHdheXMgYWx3YXlzX2NvbWIgYWx3YXlzX2ZmIGFsd2F5c19sYXRjaCBhbmQgYXNzZXJ0IGFzc2lnbiBhc3N1bWUgYXV0b21hdGljIGJlZm9yZSBiZWdpbiBiaW5kIFwiICtcbiAgICAgIFwiYmlucyBiaW5zb2YgYml0IGJyZWFrIGJ1ZiBidWZpZjAgYnVmaWYxIGJ5dGUgY2FzZSBjYXNleCBjYXNleiBjZWxsIGNoYW5kbGUgY2hlY2tlciBjbGFzcyBjbG9ja2luZyBjbW9zIGNvbmZpZyBcIiArXG4gICAgICBcImNvbnN0IGNvbnN0cmFpbnQgY29udGV4dCBjb250aW51ZSBjb3ZlciBjb3Zlcmdyb3VwIGNvdmVycG9pbnQgY3Jvc3MgZGVhc3NpZ24gZGVmYXVsdCBkZWZwYXJhbSBkZXNpZ24gZGlzYWJsZSBcIiArXG4gICAgICBcImRpc3QgZG8gZWRnZSBlbHNlIGVuZCBlbmRjYXNlIGVuZGNoZWNrZXIgZW5kY2xhc3MgZW5kY2xvY2tpbmcgZW5kY29uZmlnIGVuZGZ1bmN0aW9uIGVuZGdlbmVyYXRlIGVuZGdyb3VwIFwiICtcbiAgICAgIFwiZW5kaW50ZXJmYWNlIGVuZG1vZHVsZSBlbmRwYWNrYWdlIGVuZHByaW1pdGl2ZSBlbmRwcm9ncmFtIGVuZHByb3BlcnR5IGVuZHNwZWNpZnkgZW5kc2VxdWVuY2UgZW5kdGFibGUgZW5kdGFzayBcIiArXG4gICAgICBcImVudW0gZXZlbnQgZXZlbnR1YWxseSBleHBlY3QgZXhwb3J0IGV4dGVuZHMgZXh0ZXJuIGZpbmFsIGZpcnN0X21hdGNoIGZvciBmb3JjZSBmb3JlYWNoIGZvcmV2ZXIgZm9yayBmb3Jram9pbiBcIiArXG4gICAgICBcImZ1bmN0aW9uIGdlbmVyYXRlIGdlbnZhciBnbG9iYWwgaGlnaHowIGhpZ2h6MSBpZiBpZmYgaWZub25lIGlnbm9yZV9iaW5zIGlsbGVnYWxfYmlucyBpbXBsZW1lbnRzIGltcGxpZXMgaW1wb3J0IFwiICtcbiAgICAgIFwiaW5jZGlyIGluY2x1ZGUgaW5pdGlhbCBpbm91dCBpbnB1dCBpbnNpZGUgaW5zdGFuY2UgaW50IGludGVnZXIgaW50ZXJjb25uZWN0IGludGVyZmFjZSBpbnRlcnNlY3Qgam9pbiBqb2luX2FueSBcIiArXG4gICAgICBcImpvaW5fbm9uZSBsYXJnZSBsZXQgbGlibGlzdCBsaWJyYXJ5IGxvY2FsIGxvY2FscGFyYW0gbG9naWMgbG9uZ2ludCBtYWNyb21vZHVsZSBtYXRjaGVzIG1lZGl1bSBtb2Rwb3J0IG1vZHVsZSBcIiArXG4gICAgICBcIm5hbmQgbmVnZWRnZSBuZXR0eXBlIG5ldyBuZXh0dGltZSBubW9zIG5vciBub3Nob3djYW5jZWxsZWQgbm90IG5vdGlmMCBub3RpZjEgbnVsbCBvciBvdXRwdXQgcGFja2FnZSBwYWNrZWQgXCIgK1xuICAgICAgXCJwYXJhbWV0ZXIgcG1vcyBwb3NlZGdlIHByaW1pdGl2ZSBwcmlvcml0eSBwcm9ncmFtIHByb3BlcnR5IHByb3RlY3RlZCBwdWxsMCBwdWxsMSBwdWxsZG93biBwdWxsdXAgXCIgK1xuICAgICAgXCJwdWxzZXN0eWxlX29uZGV0ZWN0IHB1bHNlc3R5bGVfb25ldmVudCBwdXJlIHJhbmQgcmFuZGMgcmFuZGNhc2UgcmFuZHNlcXVlbmNlIHJjbW9zIHJlYWwgcmVhbHRpbWUgcmVmIHJlZyBcIiArXG4gICAgICBcInJlamVjdF9vbiByZWxlYXNlIHJlcGVhdCByZXN0cmljdCByZXR1cm4gcm5tb3MgcnBtb3MgcnRyYW4gcnRyYW5pZjAgcnRyYW5pZjEgc19hbHdheXMgc19ldmVudHVhbGx5IHNfbmV4dHRpbWUgXCIgK1xuICAgICAgXCJzX3VudGlsIHNfdW50aWxfd2l0aCBzY2FsYXJlZCBzZXF1ZW5jZSBzaG9ydGludCBzaG9ydHJlYWwgc2hvd2NhbmNlbGxlZCBzaWduZWQgc21hbGwgc29mdCBzb2x2ZSBzcGVjaWZ5IFwiICtcbiAgICAgIFwic3BlY3BhcmFtIHN0YXRpYyBzdHJpbmcgc3Ryb25nIHN0cm9uZzAgc3Ryb25nMSBzdHJ1Y3Qgc3VwZXIgc3VwcGx5MCBzdXBwbHkxIHN5bmNfYWNjZXB0X29uIHN5bmNfcmVqZWN0X29uIFwiICtcbiAgICAgIFwidGFibGUgdGFnZ2VkIHRhc2sgdGhpcyB0aHJvdWdob3V0IHRpbWUgdGltZXByZWNpc2lvbiB0aW1ldW5pdCB0cmFuIHRyYW5pZjAgdHJhbmlmMSB0cmkgdHJpMCB0cmkxIHRyaWFuZCB0cmlvciBcIiArXG4gICAgICBcInRyaXJlZyB0eXBlIHR5cGVkZWYgdW5pb24gdW5pcXVlIHVuaXF1ZTAgdW5zaWduZWQgdW50aWwgdW50aWxfd2l0aCB1bnR5cGVkIHVzZSB1d2lyZSB2YXIgdmVjdG9yZWQgdmlydHVhbCB2b2lkIFwiICtcbiAgICAgIFwid2FpdCB3YWl0X29yZGVyIHdhbmQgd2VhayB3ZWFrMCB3ZWFrMSB3aGlsZSB3aWxkY2FyZCB3aXJlIHdpdGggd2l0aGluIHdvciB4bm9yIHhvclwiKTtcblxuICAvKiogT3BlcmF0b3JzIGZyb20gSUVFRSAxODAwLTIwMTJcbiAgICAgIHVuYXJ5X29wZXJhdG9yIDo6PVxuICAgICAgKyB8IC0gfCAhIHwgfiB8ICYgfCB+JiB8IHwgfCB+fCB8IF4gfCB+XiB8IF5+XG4gICAgICBiaW5hcnlfb3BlcmF0b3IgOjo9XG4gICAgICArIHwgLSB8ICogfCAvIHwgJSB8ID09IHwgIT0gfCA9PT0gfCAhPT0gfCA9PT8gfCAhPT8gfCAmJiB8IHx8IHwgKipcbiAgICAgIHwgPCB8IDw9IHwgPiB8ID49IHwgJiB8IHwgfCBeIHwgXn4gfCB+XiB8ID4+IHwgPDwgfCA+Pj4gfCA8PDxcbiAgICAgIHwgLT4gfCA8LT5cbiAgICAgIGluY19vcl9kZWNfb3BlcmF0b3IgOjo9ICsrIHwgLS1cbiAgICAgIHVuYXJ5X21vZHVsZV9wYXRoX29wZXJhdG9yIDo6PVxuICAgICAgISB8IH4gfCAmIHwgfiYgfCB8IHwgfnwgfCBeIHwgfl4gfCBeflxuICAgICAgYmluYXJ5X21vZHVsZV9wYXRoX29wZXJhdG9yIDo6PVxuICAgICAgPT0gfCAhPSB8ICYmIHwgfHwgfCAmIHwgfCB8IF4gfCBefiB8IH5eXG4gICovXG4gIHZhciBpc09wZXJhdG9yQ2hhciA9IC9bXFwrXFwtXFwqXFwvIX4mfF4lPT86XS87XG4gIHZhciBpc0JyYWNrZXRDaGFyID0gL1tcXFtcXF17fSgpXS87XG5cbiAgdmFyIHVuc2lnbmVkTnVtYmVyID0gL1xcZFswLTlfXSovO1xuICB2YXIgZGVjaW1hbExpdGVyYWwgPSAvXFxkKlxccyoncz9kXFxzKlxcZFswLTlfXSovaTtcbiAgdmFyIGJpbmFyeUxpdGVyYWwgPSAvXFxkKlxccyoncz9iXFxzKlt4ejAxXVt4ejAxX10qL2k7XG4gIHZhciBvY3RMaXRlcmFsID0gL1xcZCpcXHMqJ3M/b1xccypbeHowLTddW3h6MC03X10qL2k7XG4gIHZhciBoZXhMaXRlcmFsID0gL1xcZCpcXHMqJ3M/aFxccypbMC05YS1meHo/XVswLTlhLWZ4ej9fXSovaTtcbiAgdmFyIHJlYWxMaXRlcmFsID0gLyhcXGRbXFxkX10qKFxcLlxcZFtcXGRfXSopP0UtP1tcXGRfXSspfChcXGRbXFxkX10qXFwuXFxkW1xcZF9dKikvaTtcblxuICB2YXIgY2xvc2luZ0JyYWNrZXRPcldvcmQgPSAvXigoXFx3Kyl8Wyl9XFxdXSkvO1xuICB2YXIgY2xvc2luZ0JyYWNrZXQgPSAvWyl9XFxdXS87XG5cbiAgdmFyIGN1clB1bmM7XG4gIHZhciBjdXJLZXl3b3JkO1xuXG4gIC8vIEJsb2NrIG9wZW5pbmdzIHdoaWNoIGFyZSBjbG9zZWQgYnkgYSBtYXRjaGluZyBrZXl3b3JkIGluIHRoZSBmb3JtIG9mIChcImVuZFwiICsga2V5d29yZClcbiAgLy8gRS5nLiBcInRhc2tcIiA9PiBcImVuZHRhc2tcIlxuICB2YXIgYmxvY2tLZXl3b3JkcyA9IHdvcmRzKFxuICAgIFwiY2FzZSBjaGVja2VyIGNsYXNzIGNsb2NraW5nIGNvbmZpZyBmdW5jdGlvbiBnZW5lcmF0ZSBpbnRlcmZhY2UgbW9kdWxlIHBhY2thZ2UgXCIgK1xuICAgICAgXCJwcmltaXRpdmUgcHJvZ3JhbSBwcm9wZXJ0eSBzcGVjaWZ5IHNlcXVlbmNlIHRhYmxlIHRhc2tcIlxuICApO1xuXG4gIC8vIE9wZW5pbmcvY2xvc2luZyBwYWlyc1xuICB2YXIgb3BlbkNsb3NlID0ge307XG4gIGZvciAodmFyIGtleXdvcmQgaW4gYmxvY2tLZXl3b3Jkcykge1xuICAgIG9wZW5DbG9zZVtrZXl3b3JkXSA9IFwiZW5kXCIgKyBrZXl3b3JkO1xuICB9XG4gIG9wZW5DbG9zZVtcImJlZ2luXCJdID0gXCJlbmRcIjtcbiAgb3BlbkNsb3NlW1wiY2FzZXhcIl0gPSBcImVuZGNhc2VcIjtcbiAgb3BlbkNsb3NlW1wiY2FzZXpcIl0gPSBcImVuZGNhc2VcIjtcbiAgb3BlbkNsb3NlW1wiZG9cIiAgIF0gPSBcIndoaWxlXCI7XG4gIG9wZW5DbG9zZVtcImZvcmtcIiBdID0gXCJqb2luO2pvaW5fYW55O2pvaW5fbm9uZVwiO1xuICBvcGVuQ2xvc2VbXCJjb3Zlcmdyb3VwXCJdID0gXCJlbmRncm91cFwiO1xuXG4gIGZvciAodmFyIGkgaW4gbm9JbmRlbnRLZXl3b3Jkcykge1xuICAgIHZhciBrZXl3b3JkID0gbm9JbmRlbnRLZXl3b3Jkc1tpXTtcbiAgICBpZiAob3BlbkNsb3NlW2tleXdvcmRdKSB7XG4gICAgICBvcGVuQ2xvc2Vba2V5d29yZF0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLy8gS2V5d29yZHMgd2hpY2ggb3BlbiBzdGF0ZW1lbnRzIHRoYXQgYXJlIGVuZGVkIHdpdGggYSBzZW1pLWNvbG9uXG4gIHZhciBzdGF0ZW1lbnRLZXl3b3JkcyA9IHdvcmRzKFwiYWx3YXlzIGFsd2F5c19jb21iIGFsd2F5c19mZiBhbHdheXNfbGF0Y2ggYXNzZXJ0IGFzc2lnbiBhc3N1bWUgZWxzZSBleHBvcnQgZm9yIGZvcmVhY2ggZm9yZXZlciBpZiBpbXBvcnQgaW5pdGlhbCByZXBlYXQgd2hpbGVcIik7XG5cbiAgZnVuY3Rpb24gdG9rZW5CYXNlKHN0cmVhbSwgc3RhdGUpIHtcbiAgICB2YXIgY2ggPSBzdHJlYW0ucGVlaygpLCBzdHlsZTtcbiAgICBpZiAoaG9va3NbY2hdICYmIChzdHlsZSA9IGhvb2tzW2NoXShzdHJlYW0sIHN0YXRlKSkgIT0gZmFsc2UpIHJldHVybiBzdHlsZTtcbiAgICBpZiAoaG9va3MudG9rZW5CYXNlICYmIChzdHlsZSA9IGhvb2tzLnRva2VuQmFzZShzdHJlYW0sIHN0YXRlKSkgIT0gZmFsc2UpXG4gICAgICByZXR1cm4gc3R5bGU7XG5cbiAgICBpZiAoL1ssOzpcXC5dLy50ZXN0KGNoKSkge1xuICAgICAgY3VyUHVuYyA9IHN0cmVhbS5uZXh0KCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGlzQnJhY2tldENoYXIudGVzdChjaCkpIHtcbiAgICAgIGN1clB1bmMgPSBzdHJlYW0ubmV4dCgpO1xuICAgICAgcmV0dXJuIFwiYnJhY2tldFwiO1xuICAgIH1cbiAgICAvLyBNYWNyb3MgKHRpY2stZGVmaW5lcylcbiAgICBpZiAoY2ggPT0gJ2AnKSB7XG4gICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgaWYgKHN0cmVhbS5lYXRXaGlsZSgvW1xcd1xcJF9dLykpIHtcbiAgICAgICAgcmV0dXJuIFwiZGVmXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gU3lzdGVtIGNhbGxzXG4gICAgaWYgKGNoID09ICckJykge1xuICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIGlmIChzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXCRfXS8pKSB7XG4gICAgICAgIHJldHVybiBcIm1ldGFcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBUaW1lIGxpdGVyYWxzXG4gICAgaWYgKGNoID09ICcjJykge1xuICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIHN0cmVhbS5lYXRXaGlsZSgvW1xcZF8uXS8pO1xuICAgICAgcmV0dXJuIFwiZGVmXCI7XG4gICAgfVxuICAgIC8vIFN0cmluZ3NcbiAgICBpZiAoY2ggPT0gJ1wiJykge1xuICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5TdHJpbmcoY2gpO1xuICAgICAgcmV0dXJuIHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgICAvLyBDb21tZW50c1xuICAgIGlmIChjaCA9PSBcIi9cIikge1xuICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgIGlmIChzdHJlYW0uZWF0KFwiKlwiKSkge1xuICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQ29tbWVudDtcbiAgICAgICAgcmV0dXJuIHRva2VuQ29tbWVudChzdHJlYW0sIHN0YXRlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJlYW0uZWF0KFwiL1wiKSkge1xuICAgICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICAgIHJldHVybiBcImNvbW1lbnRcIjtcbiAgICAgIH1cbiAgICAgIHN0cmVhbS5iYWNrVXAoMSk7XG4gICAgfVxuXG4gICAgLy8gTnVtZXJpYyBsaXRlcmFsc1xuICAgIGlmIChzdHJlYW0ubWF0Y2gocmVhbExpdGVyYWwpIHx8XG4gICAgICAgIHN0cmVhbS5tYXRjaChkZWNpbWFsTGl0ZXJhbCkgfHxcbiAgICAgICAgc3RyZWFtLm1hdGNoKGJpbmFyeUxpdGVyYWwpIHx8XG4gICAgICAgIHN0cmVhbS5tYXRjaChvY3RMaXRlcmFsKSB8fFxuICAgICAgICBzdHJlYW0ubWF0Y2goaGV4TGl0ZXJhbCkgfHxcbiAgICAgICAgc3RyZWFtLm1hdGNoKHVuc2lnbmVkTnVtYmVyKSB8fFxuICAgICAgICBzdHJlYW0ubWF0Y2gocmVhbExpdGVyYWwpKSB7XG4gICAgICByZXR1cm4gXCJudW1iZXJcIjtcbiAgICB9XG5cbiAgICAvLyBPcGVyYXRvcnNcbiAgICBpZiAoc3RyZWFtLmVhdFdoaWxlKGlzT3BlcmF0b3JDaGFyKSkge1xuICAgICAgcmV0dXJuIFwibWV0YVwiO1xuICAgIH1cblxuICAgIC8vIEtleXdvcmRzIC8gcGxhaW4gdmFyaWFibGVzXG4gICAgaWYgKHN0cmVhbS5lYXRXaGlsZSgvW1xcd1xcJF9dLykpIHtcbiAgICAgIHZhciBjdXIgPSBzdHJlYW0uY3VycmVudCgpO1xuICAgICAgaWYgKGtleXdvcmRzW2N1cl0pIHtcbiAgICAgICAgaWYgKG9wZW5DbG9zZVtjdXJdKSB7XG4gICAgICAgICAgY3VyUHVuYyA9IFwibmV3YmxvY2tcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGVtZW50S2V5d29yZHNbY3VyXSkge1xuICAgICAgICAgIGN1clB1bmMgPSBcIm5ld3N0YXRlbWVudFwiO1xuICAgICAgICB9XG4gICAgICAgIGN1cktleXdvcmQgPSBjdXI7XG4gICAgICAgIHJldHVybiBcImtleXdvcmRcIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBcInZhcmlhYmxlXCI7XG4gICAgfVxuXG4gICAgc3RyZWFtLm5leHQoKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRva2VuU3RyaW5nKHF1b3RlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgIHZhciBlc2NhcGVkID0gZmFsc2UsIG5leHQsIGVuZCA9IGZhbHNlO1xuICAgICAgd2hpbGUgKChuZXh0ID0gc3RyZWFtLm5leHQoKSkgIT0gbnVsbCkge1xuICAgICAgICBpZiAobmV4dCA9PSBxdW90ZSAmJiAhZXNjYXBlZCkge2VuZCA9IHRydWU7IGJyZWFrO31cbiAgICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkICYmIG5leHQgPT0gXCJcXFxcXCI7XG4gICAgICB9XG4gICAgICBpZiAoZW5kIHx8ICEoZXNjYXBlZCB8fCBtdWx0aUxpbmVTdHJpbmdzKSlcbiAgICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkJhc2U7XG4gICAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gdG9rZW5Db21tZW50KHN0cmVhbSwgc3RhdGUpIHtcbiAgICB2YXIgbWF5YmVFbmQgPSBmYWxzZSwgY2g7XG4gICAgd2hpbGUgKGNoID0gc3RyZWFtLm5leHQoKSkge1xuICAgICAgaWYgKGNoID09IFwiL1wiICYmIG1heWJlRW5kKSB7XG4gICAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG1heWJlRW5kID0gKGNoID09IFwiKlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIFwiY29tbWVudFwiO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dChpbmRlbnRlZCwgY29sdW1uLCB0eXBlLCBhbGlnbiwgcHJldikge1xuICAgIHRoaXMuaW5kZW50ZWQgPSBpbmRlbnRlZDtcbiAgICB0aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuYWxpZ24gPSBhbGlnbjtcbiAgICB0aGlzLnByZXYgPSBwcmV2O1xuICB9XG4gIGZ1bmN0aW9uIHB1c2hDb250ZXh0KHN0YXRlLCBjb2wsIHR5cGUpIHtcbiAgICB2YXIgaW5kZW50ID0gc3RhdGUuaW5kZW50ZWQ7XG4gICAgdmFyIGMgPSBuZXcgQ29udGV4dChpbmRlbnQsIGNvbCwgdHlwZSwgbnVsbCwgc3RhdGUuY29udGV4dCk7XG4gICAgcmV0dXJuIHN0YXRlLmNvbnRleHQgPSBjO1xuICB9XG4gIGZ1bmN0aW9uIHBvcENvbnRleHQoc3RhdGUpIHtcbiAgICB2YXIgdCA9IHN0YXRlLmNvbnRleHQudHlwZTtcbiAgICBpZiAodCA9PSBcIilcIiB8fCB0ID09IFwiXVwiIHx8IHQgPT0gXCJ9XCIpIHtcbiAgICAgIHN0YXRlLmluZGVudGVkID0gc3RhdGUuY29udGV4dC5pbmRlbnRlZDtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlLmNvbnRleHQgPSBzdGF0ZS5jb250ZXh0LnByZXY7XG4gIH1cblxuICBmdW5jdGlvbiBpc0Nsb3NpbmcodGV4dCwgY29udGV4dENsb3NpbmcpIHtcbiAgICBpZiAodGV4dCA9PSBjb250ZXh0Q2xvc2luZykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGNvbnRleHRDbG9zaW5nIG1heSBiZSBtdWx0aXBsZSBrZXl3b3JkcyBzZXBhcmF0ZWQgYnkgO1xuICAgICAgdmFyIGNsb3NpbmdLZXl3b3JkcyA9IGNvbnRleHRDbG9zaW5nLnNwbGl0KFwiO1wiKTtcbiAgICAgIGZvciAodmFyIGkgaW4gY2xvc2luZ0tleXdvcmRzKSB7XG4gICAgICAgIGlmICh0ZXh0ID09IGNsb3NpbmdLZXl3b3Jkc1tpXSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRFbGVjdHJpY0lucHV0UmVnRXgoKSB7XG4gICAgLy8gUmVpbmRlbnRhdGlvbiBzaG91bGQgb2NjdXIgb24gYW55IGJyYWNrZXQgY2hhcjoge30oKVtdXG4gICAgLy8gb3Igb24gYSBtYXRjaCBvZiBhbnkgb2YgdGhlIGJsb2NrIGNsb3Npbmcga2V5d29yZHMsIGF0XG4gICAgLy8gdGhlIGVuZCBvZiBhIGxpbmVcbiAgICB2YXIgYWxsQ2xvc2luZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpIGluIG9wZW5DbG9zZSkge1xuICAgICAgaWYgKG9wZW5DbG9zZVtpXSkge1xuICAgICAgICB2YXIgY2xvc2luZ3MgPSBvcGVuQ2xvc2VbaV0uc3BsaXQoXCI7XCIpO1xuICAgICAgICBmb3IgKHZhciBqIGluIGNsb3NpbmdzKSB7XG4gICAgICAgICAgYWxsQ2xvc2luZ3MucHVzaChjbG9zaW5nc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIlt7fSgpXFxcXFtcXFxcXV18KFwiICsgYWxsQ2xvc2luZ3Muam9pbihcInxcIikgKyBcIikkXCIpO1xuICAgIHJldHVybiByZTtcbiAgfVxuXG4gIC8vIEludGVyZmFjZVxuICByZXR1cm4ge1xuICAgIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uKGluZGVudFVuaXQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgICAgdG9rZW5pemU6IG51bGwsXG4gICAgICAgIGNvbnRleHQ6IG5ldyBDb250ZXh0KC1pbmRlbnRVbml0LCAwLCBcInRvcFwiLCBmYWxzZSksXG4gICAgICAgIGluZGVudGVkOiAwLFxuICAgICAgICBzdGFydE9mTGluZTogdHJ1ZVxuICAgICAgfTtcbiAgICAgIGlmIChob29rcy5zdGFydFN0YXRlKSBob29rcy5zdGFydFN0YXRlKHN0YXRlKTtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9LFxuXG4gICAgdG9rZW46IGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICAgIHZhciBjdHggPSBzdGF0ZS5jb250ZXh0O1xuICAgICAgaWYgKHN0cmVhbS5zb2woKSkge1xuICAgICAgICBpZiAoY3R4LmFsaWduID09IG51bGwpIGN0eC5hbGlnbiA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5pbmRlbnRlZCA9IHN0cmVhbS5pbmRlbnRhdGlvbigpO1xuICAgICAgICBzdGF0ZS5zdGFydE9mTGluZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaG9va3MudG9rZW4pIHtcbiAgICAgICAgLy8gQ2FsbCBob29rLCB3aXRoIGFuIG9wdGlvbmFsIHJldHVybiB2YWx1ZSBvZiBhIHN0eWxlIHRvIG92ZXJyaWRlIHZlcmlsb2cgc3R5bGluZy5cbiAgICAgICAgdmFyIHN0eWxlID0gaG9va3MudG9rZW4oc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIGlmIChzdHlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3RyZWFtLmVhdFNwYWNlKCkpIHJldHVybiBudWxsO1xuICAgICAgY3VyUHVuYyA9IG51bGw7XG4gICAgICBjdXJLZXl3b3JkID0gbnVsbDtcbiAgICAgIHZhciBzdHlsZSA9IChzdGF0ZS50b2tlbml6ZSB8fCB0b2tlbkJhc2UpKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgaWYgKHN0eWxlID09IFwiY29tbWVudFwiIHx8IHN0eWxlID09IFwibWV0YVwiIHx8IHN0eWxlID09IFwidmFyaWFibGVcIikgcmV0dXJuIHN0eWxlO1xuICAgICAgaWYgKGN0eC5hbGlnbiA9PSBudWxsKSBjdHguYWxpZ24gPSB0cnVlO1xuXG4gICAgICBpZiAoY3VyUHVuYyA9PSBjdHgudHlwZSkge1xuICAgICAgICBwb3BDb250ZXh0KHN0YXRlKTtcbiAgICAgIH0gZWxzZSBpZiAoKGN1clB1bmMgPT0gXCI7XCIgJiYgY3R4LnR5cGUgPT0gXCJzdGF0ZW1lbnRcIikgfHxcbiAgICAgICAgICAgICAgICAgKGN0eC50eXBlICYmIGlzQ2xvc2luZyhjdXJLZXl3b3JkLCBjdHgudHlwZSkpKSB7XG4gICAgICAgIGN0eCA9IHBvcENvbnRleHQoc3RhdGUpO1xuICAgICAgICB3aGlsZSAoY3R4ICYmIGN0eC50eXBlID09IFwic3RhdGVtZW50XCIpIGN0eCA9IHBvcENvbnRleHQoc3RhdGUpO1xuICAgICAgfSBlbHNlIGlmIChjdXJQdW5jID09IFwie1wiKSB7XG4gICAgICAgIHB1c2hDb250ZXh0KHN0YXRlLCBzdHJlYW0uY29sdW1uKCksIFwifVwiKTtcbiAgICAgIH0gZWxzZSBpZiAoY3VyUHVuYyA9PSBcIltcIikge1xuICAgICAgICBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLmNvbHVtbigpLCBcIl1cIik7XG4gICAgICB9IGVsc2UgaWYgKGN1clB1bmMgPT0gXCIoXCIpIHtcbiAgICAgICAgcHVzaENvbnRleHQoc3RhdGUsIHN0cmVhbS5jb2x1bW4oKSwgXCIpXCIpO1xuICAgICAgfSBlbHNlIGlmIChjdHggJiYgY3R4LnR5cGUgPT0gXCJlbmRjYXNlXCIgJiYgY3VyUHVuYyA9PSBcIjpcIikge1xuICAgICAgICBwdXNoQ29udGV4dChzdGF0ZSwgc3RyZWFtLmNvbHVtbigpLCBcInN0YXRlbWVudFwiKTtcbiAgICAgIH0gZWxzZSBpZiAoY3VyUHVuYyA9PSBcIm5ld3N0YXRlbWVudFwiKSB7XG4gICAgICAgIHB1c2hDb250ZXh0KHN0YXRlLCBzdHJlYW0uY29sdW1uKCksIFwic3RhdGVtZW50XCIpO1xuICAgICAgfSBlbHNlIGlmIChjdXJQdW5jID09IFwibmV3YmxvY2tcIikge1xuICAgICAgICBpZiAoY3VyS2V5d29yZCA9PSBcImZ1bmN0aW9uXCIgJiYgY3R4ICYmIChjdHgudHlwZSA9PSBcInN0YXRlbWVudFwiIHx8IGN0eC50eXBlID09IFwiZW5kZ3JvdXBcIikpIHtcbiAgICAgICAgICAvLyBUaGUgJ2Z1bmN0aW9uJyBrZXl3b3JkIGNhbiBhcHBlYXIgaW4gc29tZSBvdGhlciBjb250ZXh0cyB3aGVyZSBpdCBhY3R1YWxseSBkb2VzIG5vdFxuICAgICAgICAgIC8vIGluZGljYXRlIGEgZnVuY3Rpb24gKGltcG9ydC9leHBvcnQgRFBJIGFuZCBjb3Zlcmdyb3VwIGRlZmluaXRpb25zKS5cbiAgICAgICAgICAvLyBEbyBub3RoaW5nIGluIHRoaXMgY2FzZVxuICAgICAgICB9IGVsc2UgaWYgKGN1cktleXdvcmQgPT0gXCJ0YXNrXCIgJiYgY3R4ICYmIGN0eC50eXBlID09IFwic3RhdGVtZW50XCIpIHtcbiAgICAgICAgICAvLyBTYW1lIHRoaW5nIGZvciB0YXNrXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGNsb3NlID0gb3BlbkNsb3NlW2N1cktleXdvcmRdO1xuICAgICAgICAgIHB1c2hDb250ZXh0KHN0YXRlLCBzdHJlYW0uY29sdW1uKCksIGNsb3NlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdGF0ZS5zdGFydE9mTGluZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH0sXG5cbiAgICBpbmRlbnQ6IGZ1bmN0aW9uKHN0YXRlLCB0ZXh0QWZ0ZXIsIGN4KSB7XG4gICAgICBpZiAoc3RhdGUudG9rZW5pemUgIT0gdG9rZW5CYXNlICYmIHN0YXRlLnRva2VuaXplICE9IG51bGwpIHJldHVybiBudWxsO1xuICAgICAgaWYgKGhvb2tzLmluZGVudCkge1xuICAgICAgICB2YXIgZnJvbUhvb2sgPSBob29rcy5pbmRlbnQoc3RhdGUpO1xuICAgICAgICBpZiAoZnJvbUhvb2sgPj0gMCkgcmV0dXJuIGZyb21Ib29rO1xuICAgICAgfVxuICAgICAgdmFyIGN0eCA9IHN0YXRlLmNvbnRleHQsIGZpcnN0Q2hhciA9IHRleHRBZnRlciAmJiB0ZXh0QWZ0ZXIuY2hhckF0KDApO1xuICAgICAgaWYgKGN0eC50eXBlID09IFwic3RhdGVtZW50XCIgJiYgZmlyc3RDaGFyID09IFwifVwiKSBjdHggPSBjdHgucHJldjtcbiAgICAgIHZhciBjbG9zaW5nID0gZmFsc2U7XG4gICAgICB2YXIgcG9zc2libGVDbG9zaW5nID0gdGV4dEFmdGVyLm1hdGNoKGNsb3NpbmdCcmFja2V0T3JXb3JkKTtcbiAgICAgIGlmIChwb3NzaWJsZUNsb3NpbmcpXG4gICAgICAgIGNsb3NpbmcgPSBpc0Nsb3NpbmcocG9zc2libGVDbG9zaW5nWzBdLCBjdHgudHlwZSk7XG4gICAgICBpZiAoY3R4LnR5cGUgPT0gXCJzdGF0ZW1lbnRcIikgcmV0dXJuIGN0eC5pbmRlbnRlZCArIChmaXJzdENoYXIgPT0gXCJ7XCIgPyAwIDogc3RhdGVtZW50SW5kZW50VW5pdCB8fCBjeC51bml0KTtcbiAgICAgIGVsc2UgaWYgKGNsb3NpbmdCcmFja2V0LnRlc3QoY3R4LnR5cGUpICYmIGN0eC5hbGlnbiAmJiAhZG9udEFsaWduQ2FsbHMpIHJldHVybiBjdHguY29sdW1uICsgKGNsb3NpbmcgPyAwIDogMSk7XG4gICAgICBlbHNlIGlmIChjdHgudHlwZSA9PSBcIilcIiAmJiAhY2xvc2luZykgcmV0dXJuIGN0eC5pbmRlbnRlZCArIChzdGF0ZW1lbnRJbmRlbnRVbml0IHx8IGN4LnVuaXQpO1xuICAgICAgZWxzZSByZXR1cm4gY3R4LmluZGVudGVkICsgKGNsb3NpbmcgPyAwIDogY3gudW5pdCk7XG4gICAgfSxcblxuICAgIGxhbmd1YWdlRGF0YToge1xuICAgICAgaW5kZW50T25JbnB1dDogYnVpbGRFbGVjdHJpY0lucHV0UmVnRXgoKSxcbiAgICAgIGNvbW1lbnRUb2tlbnM6IHtsaW5lOiBcIi8vXCIsIGJsb2NrOiB7b3BlbjogXCIvKlwiLCBjbG9zZTogXCIqL1wifX1cbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgdmVyaWxvZyA9IG1rVmVyaWxvZyh7fSlcblxuLy8gVEwtVmVyaWxvZyBtb2RlLlxuLy8gU2VlIHRsLXgub3JnIGZvciBsYW5ndWFnZSBzcGVjLlxuLy8gU2VlIHRoZSBtb2RlIGluIGFjdGlvbiBhdCBtYWtlcmNoaXAuY29tLlxuLy8gQ29udGFjdDogc3RldmUuaG9vdmVyQHJlZHdvb2RlZGEuY29tXG5cbi8vIFRMViBJZGVudGlmaWVyIHByZWZpeGVzLlxuLy8gTm90ZSB0aGF0IHNpZ24gaXMgbm90IHRyZWF0ZWQgc2VwYXJhdGVseSwgc28gXCIrLy1cIiB2ZXJzaW9ucyBvZiBudW1lcmljIGlkZW50aWZpZXJzXG4vLyBhcmUgaW5jbHVkZWQuXG52YXIgdGx2SWRlbnRpZmllclN0eWxlID0ge1xuICBcInxcIjogXCJsaW5rXCIsXG4gIFwiPlwiOiBcInByb3BlcnR5XCIsICAvLyBTaG91bGQgY29uZGl0aW9uIHRoaXMgb2ZmIGZvciA+IFRMViAxYy5cbiAgXCIkXCI6IFwidmFyaWFibGVcIixcbiAgXCIkJFwiOiBcInZhcmlhYmxlXCIsXG4gIFwiPyRcIjogXCJxdWFsaWZpZXJcIixcbiAgXCI/KlwiOiBcInF1YWxpZmllclwiLFxuICBcIi1cIjogXCJjb250ZW50U2VwYXJhdG9yXCIsXG4gIFwiL1wiOiBcInByb3BlcnR5XCIsXG4gIFwiLy1cIjogXCJwcm9wZXJ0eVwiLFxuICBcIkBcIjogXCJ2YXJpYWJsZU5hbWUuc3BlY2lhbFwiLFxuICBcIkAtXCI6IFwidmFyaWFibGVOYW1lLnNwZWNpYWxcIixcbiAgXCJAKytcIjogXCJ2YXJpYWJsZU5hbWUuc3BlY2lhbFwiLFxuICBcIkArPVwiOiBcInZhcmlhYmxlTmFtZS5zcGVjaWFsXCIsXG4gIFwiQCs9LVwiOiBcInZhcmlhYmxlTmFtZS5zcGVjaWFsXCIsXG4gIFwiQC0tXCI6IFwidmFyaWFibGVOYW1lLnNwZWNpYWxcIixcbiAgXCJALT1cIjogXCJ2YXJpYWJsZU5hbWUuc3BlY2lhbFwiLFxuICBcIiUrXCI6IFwidGFnXCIsXG4gIFwiJS1cIjogXCJ0YWdcIixcbiAgXCIlXCI6IFwidGFnXCIsXG4gIFwiPj5cIjogXCJ0YWdcIixcbiAgXCI8PFwiOiBcInRhZ1wiLFxuICBcIjw+XCI6IFwidGFnXCIsXG4gIFwiI1wiOiBcInRhZ1wiLCAgLy8gTmVlZCB0byBjaG9vc2UgYSBzdHlsZSBmb3IgdGhpcy5cbiAgXCJeXCI6IFwiYXR0cmlidXRlXCIsXG4gIFwiXl5cIjogXCJhdHRyaWJ1dGVcIixcbiAgXCJeIVwiOiBcImF0dHJpYnV0ZVwiLFxuICBcIipcIjogXCJ2YXJpYWJsZVwiLFxuICBcIioqXCI6IFwidmFyaWFibGVcIixcbiAgXCJcXFxcXCI6IFwia2V5d29yZFwiLFxuICBcIlxcXCJcIjogXCJjb21tZW50XCJcbn07XG5cbi8vIExpbmVzIHN0YXJ0aW5nIHdpdGggdGhlc2UgY2hhcmFjdGVycyBkZWZpbmUgc2NvcGUgKHJlc3VsdCBpbiBpbmRlbnRhdGlvbikuXG52YXIgdGx2U2NvcGVQcmVmaXhDaGFycyA9IHtcbiAgXCIvXCI6IFwiYmVoLWhpZXJcIixcbiAgXCI+XCI6IFwiYmVoLWhpZXJcIixcbiAgXCItXCI6IFwicGh5cy1oaWVyXCIsXG4gIFwifFwiOiBcInBpcGVcIixcbiAgXCI/XCI6IFwid2hlblwiLFxuICBcIkBcIjogXCJzdGFnZVwiLFxuICBcIlxcXFxcIjogXCJrZXl3b3JkXCJcbn07XG52YXIgdGx2SW5kZW50VW5pdCA9IDM7XG52YXIgdGx2VHJhY2tTdGF0ZW1lbnRzID0gZmFsc2U7XG52YXIgdGx2SWRlbnRNYXRjaCA9IC9eKFt+IUAjXFwkJVxcXiZcXCotXFwrPVxcP1xcL1xcXFxcXHwnXCI8Pl0rKShbXFxkXFx3X10qKS87ICAvLyBNYXRjaGVzIGFuIGlkZW50aWZpZXIuXG4vLyBOb3RlIHRoYXQgJzonIGlzIGV4Y2x1ZGVkLCBiZWNhdXNlIG9mIGl0J3MgdXNlIGluIFs6XS5cbnZhciB0bHZMaW5lSW5kZW50YXRpb25NYXRjaCA9IC9eWyEgXSAqLztcbnZhciB0bHZDb21tZW50TWF0Y2ggPSAvXlxcL1tcXC9cXCpdLztcblxuZXhwb3J0IGNvbnN0IHRsdiA9IG1rVmVyaWxvZyh7XG4gIGhvb2tzOiB7XG4gICAgZWxlY3RyaWNJbnB1dDogZmFsc2UsXG5cbiAgICAvLyBSZXR1cm4gdW5kZWZpbmVkIGZvciB2ZXJpbG9nIHRva2VuaXppbmcsIG9yIHN0eWxlIGZvciBUTFYgdG9rZW4gKG51bGwgbm90IHVzZWQpLlxuICAgIC8vIFN0YW5kYXJkIENNIHN0eWxlcyBhcmUgdXNlZCBmb3IgbW9zdCBmb3JtYXR0aW5nLCBidXQgc29tZSBUTC1WZXJpbG9nLXNwZWNpZmljIGhpZ2hsaWdodGluZ1xuICAgIC8vIGNhbiBiZSBlbmFibGVkIHdpdGggdGhlIGRlZmluaXRpb24gb2YgY20tdGx2LSogc3R5bGVzLCBpbmNsdWRpbmcgaGlnaGxpZ2h0aW5nIGZvcjpcbiAgICAvLyAgIC0gTTQgdG9rZW5zXG4gICAgLy8gICAtIFRMViBzY29wZSBpbmRlbnRhdGlvblxuICAgIC8vICAgLSBTdGF0ZW1lbnQgZGVsaW1pdGF0aW9uIChlbmFibGVkIGJ5IHRsdlRyYWNrU3RhdGVtZW50cylcbiAgICB0b2tlbjogZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgICAgdmFyIHN0eWxlID0gdW5kZWZpbmVkO1xuICAgICAgdmFyIG1hdGNoOyAgLy8gUmV0dXJuIHZhbHVlIG9mIHBhdHRlcm4gbWF0Y2hlcy5cblxuICAgICAgLy8gU2V0IGhpZ2hsaWdodGluZyBtb2RlIGJhc2VkIG9uIGNvZGUgcmVnaW9uIChUTFYgb3IgU1YpLlxuICAgICAgaWYgKHN0cmVhbS5zb2woKSAmJiAhIHN0YXRlLnRsdkluQmxvY2tDb21tZW50KSB7XG4gICAgICAgIC8vIFByb2Nlc3MgcmVnaW9uLlxuICAgICAgICBpZiAoc3RyZWFtLnBlZWsoKSA9PSAnXFxcXCcpIHtcbiAgICAgICAgICBzdHlsZSA9IFwiZGVmXCI7XG4gICAgICAgICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgICAgICAgIGlmIChzdHJlYW0uc3RyaW5nLm1hdGNoKC9cXFxcU1YvKSkge1xuICAgICAgICAgICAgc3RhdGUudGx2Q29kZUFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLnN0cmluZy5tYXRjaCgvXFxcXFRMVi8pKXtcbiAgICAgICAgICAgIHN0YXRlLnRsdkNvZGVBY3RpdmUgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBDb3JyZWN0IGluZGVudGF0aW9uIGluIHRoZSBmYWNlIG9mIGEgbGluZSBwcmVmaXggY2hhci5cbiAgICAgICAgaWYgKHN0YXRlLnRsdkNvZGVBY3RpdmUgJiYgc3RyZWFtLnBvcyA9PSAwICYmXG4gICAgICAgICAgICAoc3RhdGUuaW5kZW50ZWQgPT0gMCkgJiYgKG1hdGNoID0gc3RyZWFtLm1hdGNoKHRsdkxpbmVJbmRlbnRhdGlvbk1hdGNoLCBmYWxzZSkpKSB7XG4gICAgICAgICAgc3RhdGUuaW5kZW50ZWQgPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb21wdXRlIGluZGVudGF0aW9uIHN0YXRlOlxuICAgICAgICAvLyAgIG8gQXV0byBpbmRlbnRhdGlvbiBvbiBuZXh0IGxpbmVcbiAgICAgICAgLy8gICBvIEluZGVudGF0aW9uIHNjb3BlIHN0eWxlc1xuICAgICAgICB2YXIgaW5kZW50ZWQgPSBzdGF0ZS5pbmRlbnRlZDtcbiAgICAgICAgdmFyIGRlcHRoID0gaW5kZW50ZWQgLyB0bHZJbmRlbnRVbml0O1xuICAgICAgICBpZiAoZGVwdGggPD0gc3RhdGUudGx2SW5kZW50YXRpb25TdHlsZS5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBub3QgZGVlcGVyIHRoYW4gY3VycmVudCBzY29wZVxuXG4gICAgICAgICAgdmFyIGJsYW5rbGluZSA9IHN0cmVhbS5zdHJpbmcubGVuZ3RoID09IGluZGVudGVkO1xuICAgICAgICAgIHZhciBjaFBvcyA9IGRlcHRoICogdGx2SW5kZW50VW5pdDtcbiAgICAgICAgICBpZiAoY2hQb3MgPCBzdHJlYW0uc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGJvZHlTdHJpbmcgPSBzdHJlYW0uc3RyaW5nLnNsaWNlKGNoUG9zKTtcbiAgICAgICAgICAgIHZhciBjaCA9IGJvZHlTdHJpbmdbMF07XG4gICAgICAgICAgICBpZiAodGx2U2NvcGVQcmVmaXhDaGFyc1tjaF0gJiYgKChtYXRjaCA9IGJvZHlTdHJpbmcubWF0Y2godGx2SWRlbnRNYXRjaCkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRsdklkZW50aWZpZXJTdHlsZVttYXRjaFsxXV0pKSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgbGluZSBiZWdpbnMgc2NvcGUuXG4gICAgICAgICAgICAgIC8vIE5leHQgbGluZSBnZXRzIGluZGVudGVkIG9uZSBsZXZlbC5cbiAgICAgICAgICAgICAgaW5kZW50ZWQgKz0gdGx2SW5kZW50VW5pdDtcbiAgICAgICAgICAgICAgLy8gU3R5bGUgdGhlIG5leHQgbGV2ZWwgb2YgaW5kZW50YXRpb24gKGV4Y2VwdCBub24tcmVnaW9uIGtleXdvcmQgaWRlbnRpZmllcnMsXG4gICAgICAgICAgICAgIC8vICAgd2hpY2ggYXJlIHN0YXRlbWVudHMgdGhlbXNlbHZlcylcbiAgICAgICAgICAgICAgaWYgKCEoY2ggPT0gXCJcXFxcXCIgJiYgY2hQb3MgPiAwKSkge1xuICAgICAgICAgICAgICAgIHN0YXRlLnRsdkluZGVudGF0aW9uU3R5bGVbZGVwdGhdID0gdGx2U2NvcGVQcmVmaXhDaGFyc1tjaF07XG4gICAgICAgICAgICAgICAgaWYgKHRsdlRyYWNrU3RhdGVtZW50cykge3N0YXRlLnN0YXRlbWVudENvbW1lbnQgPSBmYWxzZTt9XG4gICAgICAgICAgICAgICAgZGVwdGgrKztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBDbGVhciBvdXQgZGVlcGVyIGluZGVudGF0aW9uIGxldmVscyB1bmxlc3MgbGluZSBpcyBibGFuay5cbiAgICAgICAgICBpZiAoIWJsYW5rbGluZSkge1xuICAgICAgICAgICAgd2hpbGUgKHN0YXRlLnRsdkluZGVudGF0aW9uU3R5bGUubGVuZ3RoID4gZGVwdGgpIHtcbiAgICAgICAgICAgICAgc3RhdGUudGx2SW5kZW50YXRpb25TdHlsZS5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IG5leHQgbGV2ZWwgb2YgaW5kZW50YXRpb24uXG4gICAgICAgIHN0YXRlLnRsdk5leHRJbmRlbnQgPSBpbmRlbnRlZDtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLnRsdkNvZGVBY3RpdmUpIHtcbiAgICAgICAgLy8gSGlnaGxpZ2h0IGFzIFRMVi5cblxuICAgICAgICB2YXIgYmVnaW5TdGF0ZW1lbnQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRsdlRyYWNrU3RhdGVtZW50cykge1xuICAgICAgICAgIC8vIFRoaXMgc3RhcnRzIGEgc3RhdGVtZW50IGlmIHRoZSBwb3NpdGlvbiBpcyBhdCB0aGUgc2NvcGUgbGV2ZWxcbiAgICAgICAgICAvLyBhbmQgd2UncmUgbm90IHdpdGhpbiBhIHN0YXRlbWVudCBsZWFkaW5nIGNvbW1lbnQuXG4gICAgICAgICAgYmVnaW5TdGF0ZW1lbnQgPVxuICAgICAgICAgICAgKHN0cmVhbS5wZWVrKCkgIT0gXCIgXCIpICYmICAgLy8gbm90IGEgc3BhY2VcbiAgICAgICAgICAgIChzdHlsZSA9PT0gdW5kZWZpbmVkKSAmJiAgICAvLyBub3QgYSByZWdpb24gaWRlbnRpZmllclxuICAgICAgICAgICAgIXN0YXRlLnRsdkluQmxvY2tDb21tZW50ICYmIC8vIG5vdCBpbiBibG9jayBjb21tZW50XG4gICAgICAgICAgICAvLyFzdHJlYW0ubWF0Y2godGx2Q29tbWVudE1hdGNoLCBmYWxzZSkgJiYgLy8gbm90IGNvbW1lbnQgc3RhcnRcbiAgICAgICAgICAoc3RyZWFtLmNvbHVtbigpID09IHN0YXRlLnRsdkluZGVudGF0aW9uU3R5bGUubGVuZ3RoICogdGx2SW5kZW50VW5pdCk7ICAvLyBhdCBzY29wZSBsZXZlbFxuICAgICAgICAgIGlmIChiZWdpblN0YXRlbWVudCkge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnN0YXRlbWVudENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgLy8gc3RhdGVtZW50IGFscmVhZHkgc3RhcnRlZCBieSBjb21tZW50XG4gICAgICAgICAgICAgIGJlZ2luU3RhdGVtZW50ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGF0ZS5zdGF0ZW1lbnRDb21tZW50ID1cbiAgICAgICAgICAgICAgc3RyZWFtLm1hdGNoKHRsdkNvbW1lbnRNYXRjaCwgZmFsc2UpOyAvLyBjb21tZW50IHN0YXJ0XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1hdGNoO1xuICAgICAgICBpZiAoc3R5bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLnRsdkluQmxvY2tDb21tZW50KSB7XG4gICAgICAgICAgLy8gSW4gYSBibG9jayBjb21tZW50LlxuICAgICAgICAgIGlmIChzdHJlYW0ubWF0Y2goL14uKj9cXCpcXC8vKSkge1xuICAgICAgICAgICAgLy8gRXhpdCBibG9jayBjb21tZW50LlxuICAgICAgICAgICAgc3RhdGUudGx2SW5CbG9ja0NvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0bHZUcmFja1N0YXRlbWVudHMgJiYgIXN0cmVhbS5lb2woKSkge1xuICAgICAgICAgICAgICAvLyBBbnl0aGluZyBhZnRlciBjb21tZW50IGlzIGFzc3VtZWQgdG8gYmUgcmVhbCBzdGF0ZW1lbnQgY29udGVudC5cbiAgICAgICAgICAgICAgc3RhdGUuc3RhdGVtZW50Q29tbWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0eWxlID0gXCJjb21tZW50XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoKG1hdGNoID0gc3RyZWFtLm1hdGNoKHRsdkNvbW1lbnRNYXRjaCkpICYmICFzdGF0ZS50bHZJbkJsb2NrQ29tbWVudCkge1xuICAgICAgICAgIC8vIFN0YXJ0IGNvbW1lbnQuXG4gICAgICAgICAgaWYgKG1hdGNoWzBdID09IFwiLy9cIikge1xuICAgICAgICAgICAgLy8gTGluZSBjb21tZW50LlxuICAgICAgICAgICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBCbG9jayBjb21tZW50LlxuICAgICAgICAgICAgc3RhdGUudGx2SW5CbG9ja0NvbW1lbnQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdHlsZSA9IFwiY29tbWVudFwiO1xuICAgICAgICB9IGVsc2UgaWYgKG1hdGNoID0gc3RyZWFtLm1hdGNoKHRsdklkZW50TWF0Y2gpKSB7XG4gICAgICAgICAgLy8gbG9va3MgbGlrZSBhbiBpZGVudGlmaWVyIChvciBpZGVudGlmaWVyIHByZWZpeClcbiAgICAgICAgICB2YXIgcHJlZml4ID0gbWF0Y2hbMV07XG4gICAgICAgICAgdmFyIG1uZW1vbmljID0gbWF0Y2hbMl07XG4gICAgICAgICAgaWYgKC8vIGlzIGlkZW50aWZpZXIgcHJlZml4XG4gICAgICAgICAgICB0bHZJZGVudGlmaWVyU3R5bGUuaGFzT3duUHJvcGVydHkocHJlZml4KSAmJlxuICAgICAgICAgICAgICAvLyBoYXMgbW5lbW9uaWMgb3Igd2UncmUgYXQgdGhlIGVuZCBvZiB0aGUgbGluZSAobWF5YmUgaXQgaGFzbid0IGJlZW4gdHlwZWQgeWV0KVxuICAgICAgICAgICAgKG1uZW1vbmljLmxlbmd0aCA+IDAgfHwgc3RyZWFtLmVvbCgpKSkge1xuICAgICAgICAgICAgc3R5bGUgPSB0bHZJZGVudGlmaWVyU3R5bGVbcHJlZml4XTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSnVzdCBzd2FsbG93IG9uZSBjaGFyYWN0ZXIgYW5kIHRyeSBhZ2Fpbi5cbiAgICAgICAgICAgIC8vIFRoaXMgZW5hYmxlcyBzdWJzZXF1ZW50IGlkZW50aWZpZXIgbWF0Y2ggd2l0aCBwcmVjZWRpbmcgc3ltYm9sIGNoYXJhY3Rlciwgd2hpY2hcbiAgICAgICAgICAgIC8vICAgaXMgbGVnYWwgd2l0aGluIGEgc3RhdGVtZW50LiAgKEVnLCAhJHJlc2V0KS4gIEl0IGFsc28gZW5hYmxlcyBkZXRlY3Rpb24gb2ZcbiAgICAgICAgICAgIC8vICAgY29tbWVudCBzdGFydCB3aXRoIHByZWNlZGluZyBzeW1ib2xzLlxuICAgICAgICAgICAgc3RyZWFtLmJhY2tVcChzdHJlYW0uY3VycmVudCgpLmxlbmd0aCAtIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzdHJlYW0ubWF0Y2goL15cXHQrLykpIHtcbiAgICAgICAgICAvLyBIaWdobGlnaHQgdGFicywgd2hpY2ggYXJlIGlsbGVnYWwuXG4gICAgICAgICAgc3R5bGUgPSBcImludmFsaWRcIjtcbiAgICAgICAgfSBlbHNlIGlmIChzdHJlYW0ubWF0Y2goL15bXFxbXFxde31cXChcXCk7XFw6XSsvKSkge1xuICAgICAgICAgIC8vIFs6XSwgKCksIHt9LCA7LlxuICAgICAgICAgIHN0eWxlID0gXCJtZXRhXCI7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0Y2ggPSBzdHJlYW0ubWF0Y2goL15bbU1dNChbXFwrX10pP1tcXHdcXGRfXSovKSkge1xuICAgICAgICAgIC8vIG00IHByZSBwcm9jXG4gICAgICAgICAgc3R5bGUgPSAobWF0Y2hbMV0gPT0gXCIrXCIpID8gXCJrZXl3b3JkLnNwZWNpYWxcIiA6IFwia2V5d29yZFwiO1xuICAgICAgICB9IGVsc2UgaWYgKHN0cmVhbS5tYXRjaCgvXiArLykpe1xuICAgICAgICAgIC8vIFNraXAgb3ZlciBzcGFjZXMuXG4gICAgICAgICAgaWYgKHN0cmVhbS5lb2woKSkge1xuICAgICAgICAgICAgLy8gVHJhaWxpbmcgc3BhY2VzLlxuICAgICAgICAgICAgc3R5bGUgPSBcImVycm9yXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHN0cmVhbS5tYXRjaCgvXltcXHdcXGRfXSsvKSkge1xuICAgICAgICAgIC8vIGFscGhhLW51bWVyaWMgdG9rZW4uXG4gICAgICAgICAgc3R5bGUgPSBcIm51bWJlclwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEVhdCB0aGUgbmV4dCBjaGFyIHcvIG5vIGZvcm1hdHRpbmcuXG4gICAgICAgICAgc3RyZWFtLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0cmVhbS5tYXRjaCgvXlttTV00KFtcXHdcXGRfXSopLykpIHtcbiAgICAgICAgICAvLyBtNCBwcmUgcHJvY1xuICAgICAgICAgIHN0eWxlID0gXCJrZXl3b3JkXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9LFxuXG4gICAgaW5kZW50OiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgcmV0dXJuIChzdGF0ZS50bHZDb2RlQWN0aXZlID09IHRydWUpID8gc3RhdGUudGx2TmV4dEluZGVudCA6IC0xO1xuICAgIH0sXG5cbiAgICBzdGFydFN0YXRlOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgc3RhdGUudGx2SW5kZW50YXRpb25TdHlsZSA9IFtdOyAgLy8gU3R5bGVzIHRvIHVzZSBmb3IgZWFjaCBsZXZlbCBvZiBpbmRlbnRhdGlvbi5cbiAgICAgIHN0YXRlLnRsdkNvZGVBY3RpdmUgPSB0cnVlOyAgLy8gVHJ1ZSB3aGVuIHdlJ3JlIGluIGEgVExWIHJlZ2lvbiAoYW5kIGF0IGJlZ2lubmluZyBvZiBmaWxlKS5cbiAgICAgIHN0YXRlLnRsdk5leHRJbmRlbnQgPSAtMTsgICAgLy8gVGhlIG51bWJlciBvZiBzcGFjZXMgdG8gYXV0b2luZGVudCB0aGUgbmV4dCBsaW5lIGlmIHRsdkNvZGVBY3RpdmUuXG4gICAgICBzdGF0ZS50bHZJbkJsb2NrQ29tbWVudCA9IGZhbHNlOyAgLy8gVHJ1ZSBpbnNpZGUgLyoqLyBjb21tZW50LlxuICAgICAgaWYgKHRsdlRyYWNrU3RhdGVtZW50cykge1xuICAgICAgICBzdGF0ZS5zdGF0ZW1lbnRDb21tZW50ID0gZmFsc2U7ICAvLyBUcnVlIGluc2lkZSBhIHN0YXRlbWVudCdzIGhlYWRlciBjb21tZW50LlxuICAgICAgfVxuICAgIH1cblxuICB9XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///199\n')}}]);