(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{372:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dockerFile", function() { return dockerFile; });\n/* harmony import */ var _simple_mode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(477);\n\n\nvar from = "from";\nvar fromRegex = new RegExp("^(\\\\s*)\\\\b(" + from + ")\\\\b", "i");\n\nvar shells = ["run", "cmd", "entrypoint", "shell"];\nvar shellsAsArrayRegex = new RegExp("^(\\\\s*)(" + shells.join(\'|\') + ")(\\\\s+\\\\[)", "i");\n\nvar expose = "expose";\nvar exposeRegex = new RegExp("^(\\\\s*)(" + expose + ")(\\\\s+)", "i");\n\nvar others = [\n  "arg", "from", "maintainer", "label", "env",\n  "add", "copy", "volume", "user",\n  "workdir", "onbuild", "stopsignal", "healthcheck", "shell"\n];\n\n// Collect all Dockerfile directives\nvar instructions = [from, expose].concat(shells).concat(others),\n    instructionRegex = "(" + instructions.join(\'|\') + ")",\n    instructionOnlyLine = new RegExp("^(\\\\s*)" + instructionRegex + "(\\\\s*)(#.*)?$", "i"),\n    instructionWithArguments = new RegExp("^(\\\\s*)" + instructionRegex + "(\\\\s+)", "i");\n\nconst dockerFile = Object(_simple_mode_js__WEBPACK_IMPORTED_MODULE_0__[/* simpleMode */ "a"])({\n  start: [\n    // Block comment: This is a line starting with a comment\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: "comment"\n    },\n    {\n      regex: fromRegex,\n      token: [null, "keyword"],\n      sol: true,\n      next: "from"\n    },\n    // Highlight an instruction without any arguments (for convenience)\n    {\n      regex: instructionOnlyLine,\n      token: [null, "keyword", null, "error"],\n      sol: true\n    },\n    {\n      regex: shellsAsArrayRegex,\n      token: [null, "keyword", null],\n      sol: true,\n      next: "array"\n    },\n    {\n      regex: exposeRegex,\n      token: [null, "keyword", null],\n      sol: true,\n      next: "expose"\n    },\n    // Highlight an instruction followed by arguments\n    {\n      regex: instructionWithArguments,\n      token: [null, "keyword", null],\n      sol: true,\n      next: "arguments"\n    },\n    {\n      regex: /./,\n      token: null\n    }\n  ],\n  from: [\n    {\n      regex: /\\s*$/,\n      token: null,\n      next: "start"\n    },\n    {\n      // Line comment without instruction arguments is an error\n      regex: /(\\s*)(#.*)$/,\n      token: [null, "error"],\n      next: "start"\n    },\n    {\n      regex: /(\\s*\\S+\\s+)(as)/i,\n      token: [null, "keyword"],\n      next: "start"\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: "start"\n    }\n  ],\n  single: [\n    {\n      regex: /(?:[^\\\\\']|\\\\.)/,\n      token: "string"\n    },\n    {\n      regex: /\'/,\n      token: "string",\n      pop: true\n    }\n  ],\n  double: [\n    {\n      regex: /(?:[^\\\\"]|\\\\.)/,\n      token: "string"\n    },\n    {\n      regex: /"/,\n      token: "string",\n      pop: true\n    }\n  ],\n  array: [\n    {\n      regex: /\\]/,\n      token: null,\n      next: "start"\n    },\n    {\n      regex: /"(?:[^\\\\"]|\\\\.)*"?/,\n      token: "string"\n    }\n  ],\n  expose: [\n    {\n      regex: /\\d+$/,\n      token: "number",\n      next: "start"\n    },\n    {\n      regex: /[^\\d]+$/,\n      token: null,\n      next: "start"\n    },\n    {\n      regex: /\\d+/,\n      token: "number"\n    },\n    {\n      regex: /[^\\d]+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: "start"\n    }\n  ],\n  arguments: [\n    {\n      regex: /^\\s*#.*$/,\n      sol: true,\n      token: "comment"\n    },\n    {\n      regex: /"(?:[^\\\\"]|\\\\.)*"?$/,\n      token: "string",\n      next: "start"\n    },\n    {\n      regex: /"/,\n      token: "string",\n      push: "double"\n    },\n    {\n      regex: /\'(?:[^\\\\\']|\\\\.)*\'?$/,\n      token: "string",\n      next: "start"\n    },\n    {\n      regex: /\'/,\n      token: "string",\n      push: "single"\n    },\n    {\n      regex: /[^#"\']+[\\\\`]$/,\n      token: null\n    },\n    {\n      regex: /[^#"\']+$/,\n      token: null,\n      next: "start"\n    },\n    {\n      regex: /[^#"\']+/,\n      token: null\n    },\n    // Fail safe return to start\n    {\n      token: null,\n      next: "start"\n    }\n  ],\n  languageData: {\n    commentTokens: {line: "#"}\n  }\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvZG9ja2VyZmlsZS5qcz81YjM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUEyQzs7QUFFM0M7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPLG1CQUFtQiwwRUFBVTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EsQ0FBQyIsImZpbGUiOiIzNzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3NpbXBsZU1vZGV9IGZyb20gXCIuL3NpbXBsZS1tb2RlLmpzXCJcblxudmFyIGZyb20gPSBcImZyb21cIjtcbnZhciBmcm9tUmVnZXggPSBuZXcgUmVnRXhwKFwiXihcXFxccyopXFxcXGIoXCIgKyBmcm9tICsgXCIpXFxcXGJcIiwgXCJpXCIpO1xuXG52YXIgc2hlbGxzID0gW1wicnVuXCIsIFwiY21kXCIsIFwiZW50cnlwb2ludFwiLCBcInNoZWxsXCJdO1xudmFyIHNoZWxsc0FzQXJyYXlSZWdleCA9IG5ldyBSZWdFeHAoXCJeKFxcXFxzKikoXCIgKyBzaGVsbHMuam9pbignfCcpICsgXCIpKFxcXFxzK1xcXFxbKVwiLCBcImlcIik7XG5cbnZhciBleHBvc2UgPSBcImV4cG9zZVwiO1xudmFyIGV4cG9zZVJlZ2V4ID0gbmV3IFJlZ0V4cChcIl4oXFxcXHMqKShcIiArIGV4cG9zZSArIFwiKShcXFxccyspXCIsIFwiaVwiKTtcblxudmFyIG90aGVycyA9IFtcbiAgXCJhcmdcIiwgXCJmcm9tXCIsIFwibWFpbnRhaW5lclwiLCBcImxhYmVsXCIsIFwiZW52XCIsXG4gIFwiYWRkXCIsIFwiY29weVwiLCBcInZvbHVtZVwiLCBcInVzZXJcIixcbiAgXCJ3b3JrZGlyXCIsIFwib25idWlsZFwiLCBcInN0b3BzaWduYWxcIiwgXCJoZWFsdGhjaGVja1wiLCBcInNoZWxsXCJcbl07XG5cbi8vIENvbGxlY3QgYWxsIERvY2tlcmZpbGUgZGlyZWN0aXZlc1xudmFyIGluc3RydWN0aW9ucyA9IFtmcm9tLCBleHBvc2VdLmNvbmNhdChzaGVsbHMpLmNvbmNhdChvdGhlcnMpLFxuICAgIGluc3RydWN0aW9uUmVnZXggPSBcIihcIiArIGluc3RydWN0aW9ucy5qb2luKCd8JykgKyBcIilcIixcbiAgICBpbnN0cnVjdGlvbk9ubHlMaW5lID0gbmV3IFJlZ0V4cChcIl4oXFxcXHMqKVwiICsgaW5zdHJ1Y3Rpb25SZWdleCArIFwiKFxcXFxzKikoIy4qKT8kXCIsIFwiaVwiKSxcbiAgICBpbnN0cnVjdGlvbldpdGhBcmd1bWVudHMgPSBuZXcgUmVnRXhwKFwiXihcXFxccyopXCIgKyBpbnN0cnVjdGlvblJlZ2V4ICsgXCIoXFxcXHMrKVwiLCBcImlcIik7XG5cbmV4cG9ydCBjb25zdCBkb2NrZXJGaWxlID0gc2ltcGxlTW9kZSh7XG4gIHN0YXJ0OiBbXG4gICAgLy8gQmxvY2sgY29tbWVudDogVGhpcyBpcyBhIGxpbmUgc3RhcnRpbmcgd2l0aCBhIGNvbW1lbnRcbiAgICB7XG4gICAgICByZWdleDogL15cXHMqIy4qJC8sXG4gICAgICBzb2w6IHRydWUsXG4gICAgICB0b2tlbjogXCJjb21tZW50XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIHJlZ2V4OiBmcm9tUmVnZXgsXG4gICAgICB0b2tlbjogW251bGwsIFwia2V5d29yZFwiXSxcbiAgICAgIHNvbDogdHJ1ZSxcbiAgICAgIG5leHQ6IFwiZnJvbVwiXG4gICAgfSxcbiAgICAvLyBIaWdobGlnaHQgYW4gaW5zdHJ1Y3Rpb24gd2l0aG91dCBhbnkgYXJndW1lbnRzIChmb3IgY29udmVuaWVuY2UpXG4gICAge1xuICAgICAgcmVnZXg6IGluc3RydWN0aW9uT25seUxpbmUsXG4gICAgICB0b2tlbjogW251bGwsIFwia2V5d29yZFwiLCBudWxsLCBcImVycm9yXCJdLFxuICAgICAgc29sOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICByZWdleDogc2hlbGxzQXNBcnJheVJlZ2V4LFxuICAgICAgdG9rZW46IFtudWxsLCBcImtleXdvcmRcIiwgbnVsbF0sXG4gICAgICBzb2w6IHRydWUsXG4gICAgICBuZXh0OiBcImFycmF5XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIHJlZ2V4OiBleHBvc2VSZWdleCxcbiAgICAgIHRva2VuOiBbbnVsbCwgXCJrZXl3b3JkXCIsIG51bGxdLFxuICAgICAgc29sOiB0cnVlLFxuICAgICAgbmV4dDogXCJleHBvc2VcIlxuICAgIH0sXG4gICAgLy8gSGlnaGxpZ2h0IGFuIGluc3RydWN0aW9uIGZvbGxvd2VkIGJ5IGFyZ3VtZW50c1xuICAgIHtcbiAgICAgIHJlZ2V4OiBpbnN0cnVjdGlvbldpdGhBcmd1bWVudHMsXG4gICAgICB0b2tlbjogW251bGwsIFwia2V5d29yZFwiLCBudWxsXSxcbiAgICAgIHNvbDogdHJ1ZSxcbiAgICAgIG5leHQ6IFwiYXJndW1lbnRzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIHJlZ2V4OiAvLi8sXG4gICAgICB0b2tlbjogbnVsbFxuICAgIH1cbiAgXSxcbiAgZnJvbTogW1xuICAgIHtcbiAgICAgIHJlZ2V4OiAvXFxzKiQvLFxuICAgICAgdG9rZW46IG51bGwsXG4gICAgICBuZXh0OiBcInN0YXJ0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIExpbmUgY29tbWVudCB3aXRob3V0IGluc3RydWN0aW9uIGFyZ3VtZW50cyBpcyBhbiBlcnJvclxuICAgICAgcmVnZXg6IC8oXFxzKikoIy4qKSQvLFxuICAgICAgdG9rZW46IFtudWxsLCBcImVycm9yXCJdLFxuICAgICAgbmV4dDogXCJzdGFydFwiXG4gICAgfSxcbiAgICB7XG4gICAgICByZWdleDogLyhcXHMqXFxTK1xccyspKGFzKS9pLFxuICAgICAgdG9rZW46IFtudWxsLCBcImtleXdvcmRcIl0sXG4gICAgICBuZXh0OiBcInN0YXJ0XCJcbiAgICB9LFxuICAgIC8vIEZhaWwgc2FmZSByZXR1cm4gdG8gc3RhcnRcbiAgICB7XG4gICAgICB0b2tlbjogbnVsbCxcbiAgICAgIG5leHQ6IFwic3RhcnRcIlxuICAgIH1cbiAgXSxcbiAgc2luZ2xlOiBbXG4gICAge1xuICAgICAgcmVnZXg6IC8oPzpbXlxcXFwnXXxcXFxcLikvLFxuICAgICAgdG9rZW46IFwic3RyaW5nXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIHJlZ2V4OiAvJy8sXG4gICAgICB0b2tlbjogXCJzdHJpbmdcIixcbiAgICAgIHBvcDogdHJ1ZVxuICAgIH1cbiAgXSxcbiAgZG91YmxlOiBbXG4gICAge1xuICAgICAgcmVnZXg6IC8oPzpbXlxcXFxcIl18XFxcXC4pLyxcbiAgICAgIHRva2VuOiBcInN0cmluZ1wiXG4gICAgfSxcbiAgICB7XG4gICAgICByZWdleDogL1wiLyxcbiAgICAgIHRva2VuOiBcInN0cmluZ1wiLFxuICAgICAgcG9wOiB0cnVlXG4gICAgfVxuICBdLFxuICBhcnJheTogW1xuICAgIHtcbiAgICAgIHJlZ2V4OiAvXFxdLyxcbiAgICAgIHRva2VuOiBudWxsLFxuICAgICAgbmV4dDogXCJzdGFydFwiXG4gICAgfSxcbiAgICB7XG4gICAgICByZWdleDogL1wiKD86W15cXFxcXCJdfFxcXFwuKSpcIj8vLFxuICAgICAgdG9rZW46IFwic3RyaW5nXCJcbiAgICB9XG4gIF0sXG4gIGV4cG9zZTogW1xuICAgIHtcbiAgICAgIHJlZ2V4OiAvXFxkKyQvLFxuICAgICAgdG9rZW46IFwibnVtYmVyXCIsXG4gICAgICBuZXh0OiBcInN0YXJ0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIHJlZ2V4OiAvW15cXGRdKyQvLFxuICAgICAgdG9rZW46IG51bGwsXG4gICAgICBuZXh0OiBcInN0YXJ0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIHJlZ2V4OiAvXFxkKy8sXG4gICAgICB0b2tlbjogXCJudW1iZXJcIlxuICAgIH0sXG4gICAge1xuICAgICAgcmVnZXg6IC9bXlxcZF0rLyxcbiAgICAgIHRva2VuOiBudWxsXG4gICAgfSxcbiAgICAvLyBGYWlsIHNhZmUgcmV0dXJuIHRvIHN0YXJ0XG4gICAge1xuICAgICAgdG9rZW46IG51bGwsXG4gICAgICBuZXh0OiBcInN0YXJ0XCJcbiAgICB9XG4gIF0sXG4gIGFyZ3VtZW50czogW1xuICAgIHtcbiAgICAgIHJlZ2V4OiAvXlxccyojLiokLyxcbiAgICAgIHNvbDogdHJ1ZSxcbiAgICAgIHRva2VuOiBcImNvbW1lbnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgcmVnZXg6IC9cIig/OlteXFxcXFwiXXxcXFxcLikqXCI/JC8sXG4gICAgICB0b2tlbjogXCJzdHJpbmdcIixcbiAgICAgIG5leHQ6IFwic3RhcnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgcmVnZXg6IC9cIi8sXG4gICAgICB0b2tlbjogXCJzdHJpbmdcIixcbiAgICAgIHB1c2g6IFwiZG91YmxlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIHJlZ2V4OiAvJyg/OlteXFxcXCddfFxcXFwuKSonPyQvLFxuICAgICAgdG9rZW46IFwic3RyaW5nXCIsXG4gICAgICBuZXh0OiBcInN0YXJ0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIHJlZ2V4OiAvJy8sXG4gICAgICB0b2tlbjogXCJzdHJpbmdcIixcbiAgICAgIHB1c2g6IFwic2luZ2xlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIHJlZ2V4OiAvW14jXCInXStbXFxcXGBdJC8sXG4gICAgICB0b2tlbjogbnVsbFxuICAgIH0sXG4gICAge1xuICAgICAgcmVnZXg6IC9bXiNcIiddKyQvLFxuICAgICAgdG9rZW46IG51bGwsXG4gICAgICBuZXh0OiBcInN0YXJ0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIHJlZ2V4OiAvW14jXCInXSsvLFxuICAgICAgdG9rZW46IG51bGxcbiAgICB9LFxuICAgIC8vIEZhaWwgc2FmZSByZXR1cm4gdG8gc3RhcnRcbiAgICB7XG4gICAgICB0b2tlbjogbnVsbCxcbiAgICAgIG5leHQ6IFwic3RhcnRcIlxuICAgIH1cbiAgXSxcbiAgbGFuZ3VhZ2VEYXRhOiB7XG4gICAgY29tbWVudFRva2Vuczoge2xpbmU6IFwiI1wifVxuICB9XG59KTtcblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///372\n')},477:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return simpleMode; });\nfunction simpleMode(states) {\n  ensureState(states, "start");\n  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;\n  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n    var list = states_[state] = [], orig = states[state];\n    for (var i = 0; i < orig.length; i++) {\n      var data = orig[i];\n      list.push(new Rule(data, states));\n      if (data.indent || data.dedent) hasIndentation = true;\n    }\n  }\n  return {\n    startState: function() {\n      return {state: "start", pending: null, indent: hasIndentation ? [] : null};\n    },\n    copyState: function(state) {\n      var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};\n      if (state.stack)\n        s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    languageData: meta\n  }\n};\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name))\n    throw new Error("Undefined state " + name + " in simple mode");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = "";\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = "i";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n  return new RegExp((caret === false ? "" : "^") + "(?:" + val + ")", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val\n  if (typeof val == "string") return val.replace(/\\./g, " ");\n  var result = [];\n  for (var i = 0; i < val.length; i++)\n    result.push(val[i] && val[i].replace(/\\./g, " "));\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function(stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent)\n          state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent)\n          state.indent.pop();\n        var token = rule.token\n        if (token && token.apply) token = token(matches)\n        if (matches.length > 2 && rule.token && typeof rule.token != "string") {\n          state.pending = [];\n          for (var j = 2; j < matches.length; j++)\n            if (matches[j])\n              state.pending.push({text: matches[j], token: rule.token[j - 1]});\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function(state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1)\n      return null\n\n    var pos = state.indent.length - 1, rules = states[state.state];\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n      break;\n    }\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvc2ltcGxlLW1vZGUuanM/MDg2ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFPO0FBQ1A7QUFDQSxrQkFBa0Isa0NBQWtDO0FBQ3BEO0FBQ0E7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLEtBQUs7QUFDTDtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixnQkFBZ0I7QUFDakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLHFCQUFxQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG9CQUFvQjtBQUM3QztBQUNBLGtDQUFrQywyQ0FBMkM7QUFDN0U7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCLHFCQUFxQixrQkFBa0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNDc3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHNpbXBsZU1vZGUoc3RhdGVzKSB7XG4gIGVuc3VyZVN0YXRlKHN0YXRlcywgXCJzdGFydFwiKTtcbiAgdmFyIHN0YXRlc18gPSB7fSwgbWV0YSA9IHN0YXRlcy5sYW5ndWFnZURhdGEgfHwge30sIGhhc0luZGVudGF0aW9uID0gZmFsc2U7XG4gIGZvciAodmFyIHN0YXRlIGluIHN0YXRlcykgaWYgKHN0YXRlICE9IG1ldGEgJiYgc3RhdGVzLmhhc093blByb3BlcnR5KHN0YXRlKSkge1xuICAgIHZhciBsaXN0ID0gc3RhdGVzX1tzdGF0ZV0gPSBbXSwgb3JpZyA9IHN0YXRlc1tzdGF0ZV07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmlnLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGF0YSA9IG9yaWdbaV07XG4gICAgICBsaXN0LnB1c2gobmV3IFJ1bGUoZGF0YSwgc3RhdGVzKSk7XG4gICAgICBpZiAoZGF0YS5pbmRlbnQgfHwgZGF0YS5kZWRlbnQpIGhhc0luZGVudGF0aW9uID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdGFydFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7c3RhdGU6IFwic3RhcnRcIiwgcGVuZGluZzogbnVsbCwgaW5kZW50OiBoYXNJbmRlbnRhdGlvbiA/IFtdIDogbnVsbH07XG4gICAgfSxcbiAgICBjb3B5U3RhdGU6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICB2YXIgcyA9IHtzdGF0ZTogc3RhdGUuc3RhdGUsIHBlbmRpbmc6IHN0YXRlLnBlbmRpbmcsIGluZGVudDogc3RhdGUuaW5kZW50ICYmIHN0YXRlLmluZGVudC5zbGljZSgwKX07XG4gICAgICBpZiAoc3RhdGUuc3RhY2spXG4gICAgICAgIHMuc3RhY2sgPSBzdGF0ZS5zdGFjay5zbGljZSgwKTtcbiAgICAgIHJldHVybiBzO1xuICAgIH0sXG4gICAgdG9rZW46IHRva2VuRnVuY3Rpb24oc3RhdGVzXyksXG4gICAgaW5kZW50OiBpbmRlbnRGdW5jdGlvbihzdGF0ZXNfLCBtZXRhKSxcbiAgICBsYW5ndWFnZURhdGE6IG1ldGFcbiAgfVxufTtcblxuZnVuY3Rpb24gZW5zdXJlU3RhdGUoc3RhdGVzLCBuYW1lKSB7XG4gIGlmICghc3RhdGVzLmhhc093blByb3BlcnR5KG5hbWUpKVxuICAgIHRocm93IG5ldyBFcnJvcihcIlVuZGVmaW5lZCBzdGF0ZSBcIiArIG5hbWUgKyBcIiBpbiBzaW1wbGUgbW9kZVwiKTtcbn1cblxuZnVuY3Rpb24gdG9SZWdleCh2YWwsIGNhcmV0KSB7XG4gIGlmICghdmFsKSByZXR1cm4gLyg/OikvO1xuICB2YXIgZmxhZ3MgPSBcIlwiO1xuICBpZiAodmFsIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgaWYgKHZhbC5pZ25vcmVDYXNlKSBmbGFncyA9IFwiaVwiO1xuICAgIHZhbCA9IHZhbC5zb3VyY2U7XG4gIH0gZWxzZSB7XG4gICAgdmFsID0gU3RyaW5nKHZhbCk7XG4gIH1cbiAgcmV0dXJuIG5ldyBSZWdFeHAoKGNhcmV0ID09PSBmYWxzZSA/IFwiXCIgOiBcIl5cIikgKyBcIig/OlwiICsgdmFsICsgXCIpXCIsIGZsYWdzKTtcbn1cblxuZnVuY3Rpb24gYXNUb2tlbih2YWwpIHtcbiAgaWYgKCF2YWwpIHJldHVybiBudWxsO1xuICBpZiAodmFsLmFwcGx5KSByZXR1cm4gdmFsXG4gIGlmICh0eXBlb2YgdmFsID09IFwic3RyaW5nXCIpIHJldHVybiB2YWwucmVwbGFjZSgvXFwuL2csIFwiIFwiKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKylcbiAgICByZXN1bHQucHVzaCh2YWxbaV0gJiYgdmFsW2ldLnJlcGxhY2UoL1xcLi9nLCBcIiBcIikpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBSdWxlKGRhdGEsIHN0YXRlcykge1xuICBpZiAoZGF0YS5uZXh0IHx8IGRhdGEucHVzaCkgZW5zdXJlU3RhdGUoc3RhdGVzLCBkYXRhLm5leHQgfHwgZGF0YS5wdXNoKTtcbiAgdGhpcy5yZWdleCA9IHRvUmVnZXgoZGF0YS5yZWdleCk7XG4gIHRoaXMudG9rZW4gPSBhc1Rva2VuKGRhdGEudG9rZW4pO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xufVxuXG5mdW5jdGlvbiB0b2tlbkZ1bmN0aW9uKHN0YXRlcykge1xuICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nKSB7XG4gICAgICB2YXIgcGVuZCA9IHN0YXRlLnBlbmRpbmcuc2hpZnQoKTtcbiAgICAgIGlmIChzdGF0ZS5wZW5kaW5nLmxlbmd0aCA9PSAwKSBzdGF0ZS5wZW5kaW5nID0gbnVsbDtcbiAgICAgIHN0cmVhbS5wb3MgKz0gcGVuZC50ZXh0Lmxlbmd0aDtcbiAgICAgIHJldHVybiBwZW5kLnRva2VuO1xuICAgIH1cblxuICAgIHZhciBjdXJTdGF0ZSA9IHN0YXRlc1tzdGF0ZS5zdGF0ZV07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjdXJTdGF0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJ1bGUgPSBjdXJTdGF0ZVtpXTtcbiAgICAgIHZhciBtYXRjaGVzID0gKCFydWxlLmRhdGEuc29sIHx8IHN0cmVhbS5zb2woKSkgJiYgc3RyZWFtLm1hdGNoKHJ1bGUucmVnZXgpO1xuICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgaWYgKHJ1bGUuZGF0YS5uZXh0KSB7XG4gICAgICAgICAgc3RhdGUuc3RhdGUgPSBydWxlLmRhdGEubmV4dDtcbiAgICAgICAgfSBlbHNlIGlmIChydWxlLmRhdGEucHVzaCkge1xuICAgICAgICAgIChzdGF0ZS5zdGFjayB8fCAoc3RhdGUuc3RhY2sgPSBbXSkpLnB1c2goc3RhdGUuc3RhdGUpO1xuICAgICAgICAgIHN0YXRlLnN0YXRlID0gcnVsZS5kYXRhLnB1c2g7XG4gICAgICAgIH0gZWxzZSBpZiAocnVsZS5kYXRhLnBvcCAmJiBzdGF0ZS5zdGFjayAmJiBzdGF0ZS5zdGFjay5sZW5ndGgpIHtcbiAgICAgICAgICBzdGF0ZS5zdGF0ZSA9IHN0YXRlLnN0YWNrLnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJ1bGUuZGF0YS5pbmRlbnQpXG4gICAgICAgICAgc3RhdGUuaW5kZW50LnB1c2goc3RyZWFtLmluZGVudGF0aW9uKCkgKyBzdHJlYW0uaW5kZW50VW5pdCk7XG4gICAgICAgIGlmIChydWxlLmRhdGEuZGVkZW50KVxuICAgICAgICAgIHN0YXRlLmluZGVudC5wb3AoKTtcbiAgICAgICAgdmFyIHRva2VuID0gcnVsZS50b2tlblxuICAgICAgICBpZiAodG9rZW4gJiYgdG9rZW4uYXBwbHkpIHRva2VuID0gdG9rZW4obWF0Y2hlcylcbiAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoID4gMiAmJiBydWxlLnRva2VuICYmIHR5cGVvZiBydWxlLnRva2VuICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBzdGF0ZS5wZW5kaW5nID0gW107XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDI7IGogPCBtYXRjaGVzLmxlbmd0aDsgaisrKVxuICAgICAgICAgICAgaWYgKG1hdGNoZXNbal0pXG4gICAgICAgICAgICAgIHN0YXRlLnBlbmRpbmcucHVzaCh7dGV4dDogbWF0Y2hlc1tqXSwgdG9rZW46IHJ1bGUudG9rZW5baiAtIDFdfSk7XG4gICAgICAgICAgc3RyZWFtLmJhY2tVcChtYXRjaGVzWzBdLmxlbmd0aCAtIChtYXRjaGVzWzFdID8gbWF0Y2hlc1sxXS5sZW5ndGggOiAwKSk7XG4gICAgICAgICAgcmV0dXJuIHRva2VuWzBdO1xuICAgICAgICB9IGVsc2UgaWYgKHRva2VuICYmIHRva2VuLmpvaW4pIHtcbiAgICAgICAgICByZXR1cm4gdG9rZW5bMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHN0cmVhbS5uZXh0KCk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluZGVudEZ1bmN0aW9uKHN0YXRlcywgbWV0YSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhdGUsIHRleHRBZnRlcikge1xuICAgIGlmIChzdGF0ZS5pbmRlbnQgPT0gbnVsbCB8fCBtZXRhLmRvbnRJbmRlbnRTdGF0ZXMgJiYgbWV0YS5kb25lSW5kZW50U3RhdGUuaW5kZXhPZihzdGF0ZS5zdGF0ZSkgPiAtMSlcbiAgICAgIHJldHVybiBudWxsXG5cbiAgICB2YXIgcG9zID0gc3RhdGUuaW5kZW50Lmxlbmd0aCAtIDEsIHJ1bGVzID0gc3RhdGVzW3N0YXRlLnN0YXRlXTtcbiAgICBzY2FuOiBmb3IgKDs7KSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBydWxlID0gcnVsZXNbaV07XG4gICAgICAgIGlmIChydWxlLmRhdGEuZGVkZW50ICYmIHJ1bGUuZGF0YS5kZWRlbnRJZkxpbmVTdGFydCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICB2YXIgbSA9IHJ1bGUucmVnZXguZXhlYyh0ZXh0QWZ0ZXIpO1xuICAgICAgICAgIGlmIChtICYmIG1bMF0pIHtcbiAgICAgICAgICAgIHBvcy0tO1xuICAgICAgICAgICAgaWYgKHJ1bGUubmV4dCB8fCBydWxlLnB1c2gpIHJ1bGVzID0gc3RhdGVzW3J1bGUubmV4dCB8fCBydWxlLnB1c2hdO1xuICAgICAgICAgICAgdGV4dEFmdGVyID0gdGV4dEFmdGVyLnNsaWNlKG1bMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgIGNvbnRpbnVlIHNjYW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHBvcyA8IDAgPyAwIDogc3RhdGUuaW5kZW50W3Bvc107XG4gIH07XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///477\n')}}]);