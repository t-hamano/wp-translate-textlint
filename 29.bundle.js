(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[29],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/commonlisp.js":
/*!******************************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/commonlisp.js ***!
  \******************************************************************/
/*! exports provided: commonLisp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"commonLisp\", function() { return commonLisp; });\nvar specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;\nvar assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;\nvar numLiteral = /^(?:[+\\-]?(?:\\d+|\\d*\\.\\d+)(?:[efd][+\\-]?\\d+)?|[+\\-]?\\d+(?:\\/[+\\-]?\\d+)?|#b[+\\-]?[01]+|#o[+\\-]?[0-7]+|#x[+\\-]?[\\da-f]+)/;\nvar symbol = /[^\\s'`,@()\\[\\]\";]/;\nvar type;\n\nfunction readSym(stream) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"\\\\\") stream.next();\n    else if (!symbol.test(ch)) { stream.backUp(1); break; }\n  }\n  return stream.current();\n}\n\nfunction base(stream, state) {\n  if (stream.eatSpace()) {type = \"ws\"; return null;}\n  if (stream.match(numLiteral)) return \"number\";\n  var ch = stream.next();\n  if (ch == \"\\\\\") ch = stream.next();\n\n  if (ch == '\"') return (state.tokenize = inString)(stream, state);\n  else if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n  else if (ch == \")\" || ch == \"]\") { type = \"close\"; return \"bracket\"; }\n  else if (ch == \";\") { stream.skipToEnd(); type = \"ws\"; return \"comment\"; }\n  else if (/['`,@]/.test(ch)) return null;\n  else if (ch == \"|\") {\n    if (stream.skipTo(\"|\")) { stream.next(); return \"variableName\"; }\n    else { stream.skipToEnd(); return \"error\"; }\n  } else if (ch == \"#\") {\n    var ch = stream.next();\n    if (ch == \"(\") { type = \"open\"; return \"bracket\"; }\n    else if (/[+\\-=\\.']/.test(ch)) return null;\n    else if (/\\d/.test(ch) && stream.match(/^\\d*#/)) return null;\n    else if (ch == \"|\") return (state.tokenize = inComment)(stream, state);\n    else if (ch == \":\") { readSym(stream); return \"meta\"; }\n    else if (ch == \"\\\\\") { stream.next(); readSym(stream); return \"string.special\" }\n    else return \"error\";\n  } else {\n    var name = readSym(stream);\n    if (name == \".\") return null;\n    type = \"symbol\";\n    if (name == \"nil\" || name == \"t\" || name.charAt(0) == \":\") return \"atom\";\n    if (state.lastType == \"open\" && (specialForm.test(name) || assumeBody.test(name))) return \"keyword\";\n    if (name.charAt(0) == \"&\") return \"variableName.special\";\n    return \"variableName\";\n  }\n}\n\nfunction inString(stream, state) {\n  var escaped = false, next;\n  while (next = stream.next()) {\n    if (next == '\"' && !escaped) { state.tokenize = base; break; }\n    escaped = !escaped && next == \"\\\\\";\n  }\n  return \"string\";\n}\n\nfunction inComment(stream, state) {\n  var next, last;\n  while (next = stream.next()) {\n    if (next == \"#\" && last == \"|\") { state.tokenize = base; break; }\n    last = next;\n  }\n  type = \"ws\";\n  return \"comment\";\n}\n\nconst commonLisp = {\n  startState: function () {\n    return {ctx: {prev: null, start: 0, indentTo: 0}, lastType: null, tokenize: base};\n  },\n\n  token: function (stream, state) {\n    if (stream.sol() && typeof state.ctx.indentTo != \"number\")\n      state.ctx.indentTo = state.ctx.start + 1;\n\n    type = null;\n    var style = state.tokenize(stream, state);\n    if (type != \"ws\") {\n      if (state.ctx.indentTo == null) {\n        if (type == \"symbol\" && assumeBody.test(stream.current()))\n          state.ctx.indentTo = state.ctx.start + stream.indentUnit;\n        else\n          state.ctx.indentTo = \"next\";\n      } else if (state.ctx.indentTo == \"next\") {\n        state.ctx.indentTo = stream.column();\n      }\n      state.lastType = type;\n    }\n    if (type == \"open\") state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n    else if (type == \"close\") state.ctx = state.ctx.prev || state.ctx;\n    return style;\n  },\n\n  indent: function (state) {\n    var i = state.ctx.indentTo;\n    return typeof i == \"number\" ? i : state.ctx.start + 1;\n  },\n\n  languageData: {\n    commentTokens: {line: \";;\", block: {open: \"#|\", close: \"|#\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']}\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvY29tbW9ubGlzcC5qcz8yMDg3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msa0JBQWtCLE9BQU87QUFDekQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCLFlBQVk7QUFDdEM7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLGVBQWUsa0JBQWtCO0FBQ3hELG9DQUFvQyxnQkFBZ0Isa0JBQWtCO0FBQ3RFLG1CQUFtQixJQUFJLG9CQUFvQixhQUFhLGtCQUFrQjtBQUMxRTtBQUNBO0FBQ0EsNkJBQTZCLGVBQWUsdUJBQXVCO0FBQ25FLFVBQVUsb0JBQW9CLGdCQUFnQjtBQUM5QyxHQUFHO0FBQ0g7QUFDQSxvQkFBb0IsZUFBZSxrQkFBa0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGlCQUFpQixlQUFlO0FBQ3pELDBCQUEwQixlQUFlLGlCQUFpQjtBQUMxRDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLHVCQUF1QixPQUFPO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyx1QkFBdUIsT0FBTztBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQSxZQUFZLE1BQU0sa0NBQWtDO0FBQ3BELEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLG9CQUFvQixTQUFTLFdBQVcseUJBQXlCO0FBQ2pFLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9jb21tb25saXNwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHNwZWNpYWxGb3JtID0gL14oYmxvY2t8bGV0KnxyZXR1cm4tZnJvbXxjYXRjaHxsb2FkLXRpbWUtdmFsdWV8c2V0cXxldmFsLXdoZW58bG9jYWxseXxzeW1ib2wtbWFjcm9sZXR8ZmxldHxtYWNyb2xldHx0YWdib2R5fGZ1bmN0aW9ufG11bHRpcGxlLXZhbHVlLWNhbGx8dGhlfGdvfG11bHRpcGxlLXZhbHVlLXByb2cxfHRocm93fGlmfHByb2dufHVud2luZC1wcm90ZWN0fGxhYmVsc3xwcm9ndnxsZXR8cXVvdGUpJC87XG52YXIgYXNzdW1lQm9keSA9IC9ed2l0aHxeZGVmfF5kb3xecHJvZ3xjYXNlJHxeY29uZCR8YmluZCR8d2hlbiR8dW5sZXNzJC87XG52YXIgbnVtTGl0ZXJhbCA9IC9eKD86WytcXC1dPyg/OlxcZCt8XFxkKlxcLlxcZCspKD86W2VmZF1bK1xcLV0/XFxkKyk/fFsrXFwtXT9cXGQrKD86XFwvWytcXC1dP1xcZCspP3wjYlsrXFwtXT9bMDFdK3wjb1srXFwtXT9bMC03XSt8I3hbK1xcLV0/W1xcZGEtZl0rKS87XG52YXIgc3ltYm9sID0gL1teXFxzJ2AsQCgpXFxbXFxdXCI7XS87XG52YXIgdHlwZTtcblxuZnVuY3Rpb24gcmVhZFN5bShzdHJlYW0pIHtcbiAgdmFyIGNoO1xuICB3aGlsZSAoY2ggPSBzdHJlYW0ubmV4dCgpKSB7XG4gICAgaWYgKGNoID09IFwiXFxcXFwiKSBzdHJlYW0ubmV4dCgpO1xuICAgIGVsc2UgaWYgKCFzeW1ib2wudGVzdChjaCkpIHsgc3RyZWFtLmJhY2tVcCgxKTsgYnJlYWs7IH1cbiAgfVxuICByZXR1cm4gc3RyZWFtLmN1cnJlbnQoKTtcbn1cblxuZnVuY3Rpb24gYmFzZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdHJlYW0uZWF0U3BhY2UoKSkge3R5cGUgPSBcIndzXCI7IHJldHVybiBudWxsO31cbiAgaWYgKHN0cmVhbS5tYXRjaChudW1MaXRlcmFsKSkgcmV0dXJuIFwibnVtYmVyXCI7XG4gIHZhciBjaCA9IHN0cmVhbS5uZXh0KCk7XG4gIGlmIChjaCA9PSBcIlxcXFxcIikgY2ggPSBzdHJlYW0ubmV4dCgpO1xuXG4gIGlmIChjaCA9PSAnXCInKSByZXR1cm4gKHN0YXRlLnRva2VuaXplID0gaW5TdHJpbmcpKHN0cmVhbSwgc3RhdGUpO1xuICBlbHNlIGlmIChjaCA9PSBcIihcIikgeyB0eXBlID0gXCJvcGVuXCI7IHJldHVybiBcImJyYWNrZXRcIjsgfVxuICBlbHNlIGlmIChjaCA9PSBcIilcIiB8fCBjaCA9PSBcIl1cIikgeyB0eXBlID0gXCJjbG9zZVwiOyByZXR1cm4gXCJicmFja2V0XCI7IH1cbiAgZWxzZSBpZiAoY2ggPT0gXCI7XCIpIHsgc3RyZWFtLnNraXBUb0VuZCgpOyB0eXBlID0gXCJ3c1wiOyByZXR1cm4gXCJjb21tZW50XCI7IH1cbiAgZWxzZSBpZiAoL1snYCxAXS8udGVzdChjaCkpIHJldHVybiBudWxsO1xuICBlbHNlIGlmIChjaCA9PSBcInxcIikge1xuICAgIGlmIChzdHJlYW0uc2tpcFRvKFwifFwiKSkgeyBzdHJlYW0ubmV4dCgpOyByZXR1cm4gXCJ2YXJpYWJsZU5hbWVcIjsgfVxuICAgIGVsc2UgeyBzdHJlYW0uc2tpcFRvRW5kKCk7IHJldHVybiBcImVycm9yXCI7IH1cbiAgfSBlbHNlIGlmIChjaCA9PSBcIiNcIikge1xuICAgIHZhciBjaCA9IHN0cmVhbS5uZXh0KCk7XG4gICAgaWYgKGNoID09IFwiKFwiKSB7IHR5cGUgPSBcIm9wZW5cIjsgcmV0dXJuIFwiYnJhY2tldFwiOyB9XG4gICAgZWxzZSBpZiAoL1srXFwtPVxcLiddLy50ZXN0KGNoKSkgcmV0dXJuIG51bGw7XG4gICAgZWxzZSBpZiAoL1xcZC8udGVzdChjaCkgJiYgc3RyZWFtLm1hdGNoKC9eXFxkKiMvKSkgcmV0dXJuIG51bGw7XG4gICAgZWxzZSBpZiAoY2ggPT0gXCJ8XCIpIHJldHVybiAoc3RhdGUudG9rZW5pemUgPSBpbkNvbW1lbnQpKHN0cmVhbSwgc3RhdGUpO1xuICAgIGVsc2UgaWYgKGNoID09IFwiOlwiKSB7IHJlYWRTeW0oc3RyZWFtKTsgcmV0dXJuIFwibWV0YVwiOyB9XG4gICAgZWxzZSBpZiAoY2ggPT0gXCJcXFxcXCIpIHsgc3RyZWFtLm5leHQoKTsgcmVhZFN5bShzdHJlYW0pOyByZXR1cm4gXCJzdHJpbmcuc3BlY2lhbFwiIH1cbiAgICBlbHNlIHJldHVybiBcImVycm9yXCI7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG5hbWUgPSByZWFkU3ltKHN0cmVhbSk7XG4gICAgaWYgKG5hbWUgPT0gXCIuXCIpIHJldHVybiBudWxsO1xuICAgIHR5cGUgPSBcInN5bWJvbFwiO1xuICAgIGlmIChuYW1lID09IFwibmlsXCIgfHwgbmFtZSA9PSBcInRcIiB8fCBuYW1lLmNoYXJBdCgwKSA9PSBcIjpcIikgcmV0dXJuIFwiYXRvbVwiO1xuICAgIGlmIChzdGF0ZS5sYXN0VHlwZSA9PSBcIm9wZW5cIiAmJiAoc3BlY2lhbEZvcm0udGVzdChuYW1lKSB8fCBhc3N1bWVCb2R5LnRlc3QobmFtZSkpKSByZXR1cm4gXCJrZXl3b3JkXCI7XG4gICAgaWYgKG5hbWUuY2hhckF0KDApID09IFwiJlwiKSByZXR1cm4gXCJ2YXJpYWJsZU5hbWUuc3BlY2lhbFwiO1xuICAgIHJldHVybiBcInZhcmlhYmxlTmFtZVwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluU3RyaW5nKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGVzY2FwZWQgPSBmYWxzZSwgbmV4dDtcbiAgd2hpbGUgKG5leHQgPSBzdHJlYW0ubmV4dCgpKSB7XG4gICAgaWYgKG5leHQgPT0gJ1wiJyAmJiAhZXNjYXBlZCkgeyBzdGF0ZS50b2tlbml6ZSA9IGJhc2U7IGJyZWFrOyB9XG4gICAgZXNjYXBlZCA9ICFlc2NhcGVkICYmIG5leHQgPT0gXCJcXFxcXCI7XG4gIH1cbiAgcmV0dXJuIFwic3RyaW5nXCI7XG59XG5cbmZ1bmN0aW9uIGluQ29tbWVudChzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBuZXh0LCBsYXN0O1xuICB3aGlsZSAobmV4dCA9IHN0cmVhbS5uZXh0KCkpIHtcbiAgICBpZiAobmV4dCA9PSBcIiNcIiAmJiBsYXN0ID09IFwifFwiKSB7IHN0YXRlLnRva2VuaXplID0gYmFzZTsgYnJlYWs7IH1cbiAgICBsYXN0ID0gbmV4dDtcbiAgfVxuICB0eXBlID0gXCJ3c1wiO1xuICByZXR1cm4gXCJjb21tZW50XCI7XG59XG5cbmV4cG9ydCBjb25zdCBjb21tb25MaXNwID0ge1xuICBzdGFydFN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtjdHg6IHtwcmV2OiBudWxsLCBzdGFydDogMCwgaW5kZW50VG86IDB9LCBsYXN0VHlwZTogbnVsbCwgdG9rZW5pemU6IGJhc2V9O1xuICB9LFxuXG4gIHRva2VuOiBmdW5jdGlvbiAoc3RyZWFtLCBzdGF0ZSkge1xuICAgIGlmIChzdHJlYW0uc29sKCkgJiYgdHlwZW9mIHN0YXRlLmN0eC5pbmRlbnRUbyAhPSBcIm51bWJlclwiKVxuICAgICAgc3RhdGUuY3R4LmluZGVudFRvID0gc3RhdGUuY3R4LnN0YXJ0ICsgMTtcblxuICAgIHR5cGUgPSBudWxsO1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmICh0eXBlICE9IFwid3NcIikge1xuICAgICAgaWYgKHN0YXRlLmN0eC5pbmRlbnRUbyA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlID09IFwic3ltYm9sXCIgJiYgYXNzdW1lQm9keS50ZXN0KHN0cmVhbS5jdXJyZW50KCkpKVxuICAgICAgICAgIHN0YXRlLmN0eC5pbmRlbnRUbyA9IHN0YXRlLmN0eC5zdGFydCArIHN0cmVhbS5pbmRlbnRVbml0O1xuICAgICAgICBlbHNlXG4gICAgICAgICAgc3RhdGUuY3R4LmluZGVudFRvID0gXCJuZXh0XCI7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmN0eC5pbmRlbnRUbyA9PSBcIm5leHRcIikge1xuICAgICAgICBzdGF0ZS5jdHguaW5kZW50VG8gPSBzdHJlYW0uY29sdW1uKCk7XG4gICAgICB9XG4gICAgICBzdGF0ZS5sYXN0VHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIGlmICh0eXBlID09IFwib3BlblwiKSBzdGF0ZS5jdHggPSB7cHJldjogc3RhdGUuY3R4LCBzdGFydDogc3RyZWFtLmNvbHVtbigpLCBpbmRlbnRUbzogbnVsbH07XG4gICAgZWxzZSBpZiAodHlwZSA9PSBcImNsb3NlXCIpIHN0YXRlLmN0eCA9IHN0YXRlLmN0eC5wcmV2IHx8IHN0YXRlLmN0eDtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0sXG5cbiAgaW5kZW50OiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICB2YXIgaSA9IHN0YXRlLmN0eC5pbmRlbnRUbztcbiAgICByZXR1cm4gdHlwZW9mIGkgPT0gXCJudW1iZXJcIiA/IGkgOiBzdGF0ZS5jdHguc3RhcnQgKyAxO1xuICB9LFxuXG4gIGxhbmd1YWdlRGF0YToge1xuICAgIGNvbW1lbnRUb2tlbnM6IHtsaW5lOiBcIjs7XCIsIGJsb2NrOiB7b3BlbjogXCIjfFwiLCBjbG9zZTogXCJ8I1wifX0sXG4gICAgY2xvc2VCcmFja2V0czoge2JyYWNrZXRzOiBbXCIoXCIsIFwiW1wiLCBcIntcIiwgJ1wiJ119XG4gIH1cbn07XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@codemirror/legacy-modes/mode/commonlisp.js\n");

/***/ })

}]);