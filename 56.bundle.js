(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[56],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/mathematica.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/mathematica.js ***!
  \*******************************************************************/
/*! exports provided: mathematica */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mathematica\", function() { return mathematica; });\n// used pattern building blocks\nvar Identifier = '[a-zA-Z\\\\$][a-zA-Z0-9\\\\$]*';\nvar pBase      = \"(?:\\\\d+)\";\nvar pFloat     = \"(?:\\\\.\\\\d+|\\\\d+\\\\.\\\\d*|\\\\d+)\";\nvar pFloatBase = \"(?:\\\\.\\\\w+|\\\\w+\\\\.\\\\w*|\\\\w+)\";\nvar pPrecision = \"(?:`(?:`?\"+pFloat+\")?)\";\n\n// regular expressions\nvar reBaseForm        = new RegExp('(?:'+pBase+'(?:\\\\^\\\\^'+pFloatBase+pPrecision+'?(?:\\\\*\\\\^[+-]?\\\\d+)?))');\nvar reFloatForm       = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\\\*\\\\^[+-]?\\\\d+)?)');\nvar reIdInContext     = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');\n\nfunction tokenBase(stream, state) {\n  var ch;\n\n  // get next character\n  ch = stream.next();\n\n  // string\n  if (ch === '\"') {\n    state.tokenize = tokenString;\n    return state.tokenize(stream, state);\n  }\n\n  // comment\n  if (ch === '(') {\n    if (stream.eat('*')) {\n      state.commentLevel++;\n      state.tokenize = tokenComment;\n      return state.tokenize(stream, state);\n    }\n  }\n\n  // go back one character\n  stream.backUp(1);\n\n  // look for numbers\n  // Numbers in a baseform\n  if (stream.match(reBaseForm, true, false)) {\n    return 'number';\n  }\n\n  // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition\n  // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.\n  if (stream.match(reFloatForm, true, false)) {\n    return 'number';\n  }\n\n  /* In[23] and Out[34] */\n  if (stream.match(/(?:In|Out)\\[[0-9]*\\]/, true, false)) {\n    return 'atom';\n  }\n\n  // usage\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::usage)/, true, false)) {\n    return 'meta';\n  }\n\n  // message\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*(?:`[a-zA-Z0-9\\$]+)*::[a-zA-Z\\$][a-zA-Z0-9\\$]*):?/, true, false)) {\n    return 'string.special';\n  }\n\n  // this makes a look-ahead match for something like variable:{_Integer}\n  // the match is then forwarded to the mma-patterns tokenizer.\n  if (stream.match(/([a-zA-Z\\$][a-zA-Z0-9\\$]*\\s*:)(?:(?:[a-zA-Z\\$][a-zA-Z0-9\\$]*)|(?:[^:=>~@\\^\\&\\*\\)\\[\\]'\\?,\\|])).*/, true, false)) {\n    return 'variableName.special';\n  }\n\n  // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)\n  // Cannot start with a number, but can have numbers at any other position. Examples\n  // blub__Integer, a1_, b34_Integer32\n  if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n    return 'variableName.special';\n  }\n  if (stream.match(/[a-zA-Z\\$][a-zA-Z0-9\\$]*_+/, true, false)) {\n    return 'variableName.special';\n  }\n  if (stream.match(/_+[a-zA-Z\\$][a-zA-Z0-9\\$]*/, true, false)) {\n    return 'variableName.special';\n  }\n\n  // Named characters in Mathematica, like \\[Gamma].\n  if (stream.match(/\\\\\\[[a-zA-Z\\$][a-zA-Z0-9\\$]*\\]/, true, false)) {\n    return 'character';\n  }\n\n  // Match all braces separately\n  if (stream.match(/(?:\\[|\\]|{|}|\\(|\\))/, true, false)) {\n    return 'bracket';\n  }\n\n  // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match\n  // only one.\n  if (stream.match(/(?:#[a-zA-Z\\$][a-zA-Z0-9\\$]*|#+[0-9]?)/, true, false)) {\n    return 'variableName.constant';\n  }\n\n  // Literals like variables, keywords, functions\n  if (stream.match(reIdInContext, true, false)) {\n    return 'keyword';\n  }\n\n  // operators. Note that operators like @@ or /; are matched separately for each symbol.\n  if (stream.match(/(?:\\\\|\\+|\\-|\\*|\\/|,|;|\\.|:|@|~|=|>|<|&|\\||_|`|'|\\^|\\?|!|%)/, true, false)) {\n    return 'operator';\n  }\n\n  // everything else is an error\n  stream.next(); // advance the stream.\n  return 'error';\n}\n\nfunction tokenString(stream, state) {\n  var next, end = false, escaped = false;\n  while ((next = stream.next()) != null) {\n    if (next === '\"' && !escaped) {\n      end = true;\n      break;\n    }\n    escaped = !escaped && next === '\\\\';\n  }\n  if (end && !escaped) {\n    state.tokenize = tokenBase;\n  }\n  return 'string';\n};\n\nfunction tokenComment(stream, state) {\n  var prev, next;\n  while(state.commentLevel > 0 && (next = stream.next()) != null) {\n    if (prev === '(' && next === '*') state.commentLevel++;\n    if (prev === '*' && next === ')') state.commentLevel--;\n    prev = next;\n  }\n  if (state.commentLevel <= 0) {\n    state.tokenize = tokenBase;\n  }\n  return 'comment';\n}\n\nconst mathematica = {\n  startState: function() {return {tokenize: tokenBase, commentLevel: 0};},\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {block: {open: \"(*\", close: \"*)\"}}\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvbWF0aGVtYXRpY2EuanM/M2YzNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0VBQWdFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhCQUE4QixFQUFFO0FBQ2hDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpREFBaUQ7QUFDakQseUNBQXlDO0FBQ3pDO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTztBQUNQLDBCQUEwQixRQUFRLHVDQUF1QztBQUN6RTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bjb2RlbWlycm9yL2xlZ2FjeS1tb2Rlcy9tb2RlL21hdGhlbWF0aWNhLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdXNlZCBwYXR0ZXJuIGJ1aWxkaW5nIGJsb2Nrc1xudmFyIElkZW50aWZpZXIgPSAnW2EtekEtWlxcXFwkXVthLXpBLVowLTlcXFxcJF0qJztcbnZhciBwQmFzZSAgICAgID0gXCIoPzpcXFxcZCspXCI7XG52YXIgcEZsb2F0ICAgICA9IFwiKD86XFxcXC5cXFxcZCt8XFxcXGQrXFxcXC5cXFxcZCp8XFxcXGQrKVwiO1xudmFyIHBGbG9hdEJhc2UgPSBcIig/OlxcXFwuXFxcXHcrfFxcXFx3K1xcXFwuXFxcXHcqfFxcXFx3KylcIjtcbnZhciBwUHJlY2lzaW9uID0gXCIoPzpgKD86YD9cIitwRmxvYXQrXCIpPylcIjtcblxuLy8gcmVndWxhciBleHByZXNzaW9uc1xudmFyIHJlQmFzZUZvcm0gICAgICAgID0gbmV3IFJlZ0V4cCgnKD86JytwQmFzZSsnKD86XFxcXF5cXFxcXicrcEZsb2F0QmFzZStwUHJlY2lzaW9uKyc/KD86XFxcXCpcXFxcXlsrLV0/XFxcXGQrKT8pKScpO1xudmFyIHJlRmxvYXRGb3JtICAgICAgID0gbmV3IFJlZ0V4cCgnKD86JyArIHBGbG9hdCArIHBQcmVjaXNpb24gKyAnPyg/OlxcXFwqXFxcXF5bKy1dP1xcXFxkKyk/KScpO1xudmFyIHJlSWRJbkNvbnRleHQgICAgID0gbmV3IFJlZ0V4cCgnKD86YD8pKD86JyArIElkZW50aWZpZXIgKyAnKSg/OmAoPzonICsgSWRlbnRpZmllciArICcpKSooPzpgPyknKTtcblxuZnVuY3Rpb24gdG9rZW5CYXNlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGNoO1xuXG4gIC8vIGdldCBuZXh0IGNoYXJhY3RlclxuICBjaCA9IHN0cmVhbS5uZXh0KCk7XG5cbiAgLy8gc3RyaW5nXG4gIGlmIChjaCA9PT0gJ1wiJykge1xuICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5TdHJpbmc7XG4gICAgcmV0dXJuIHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpO1xuICB9XG5cbiAgLy8gY29tbWVudFxuICBpZiAoY2ggPT09ICcoJykge1xuICAgIGlmIChzdHJlYW0uZWF0KCcqJykpIHtcbiAgICAgIHN0YXRlLmNvbW1lbnRMZXZlbCsrO1xuICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkNvbW1lbnQ7XG4gICAgICByZXR1cm4gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZ28gYmFjayBvbmUgY2hhcmFjdGVyXG4gIHN0cmVhbS5iYWNrVXAoMSk7XG5cbiAgLy8gbG9vayBmb3IgbnVtYmVyc1xuICAvLyBOdW1iZXJzIGluIGEgYmFzZWZvcm1cbiAgaWYgKHN0cmVhbS5tYXRjaChyZUJhc2VGb3JtLCB0cnVlLCBmYWxzZSkpIHtcbiAgICByZXR1cm4gJ251bWJlcic7XG4gIH1cblxuICAvLyBNYXRoZW1hdGljYSBudW1iZXJzLiBGbG9hdHMgKDEuMiwgLjIsIDEuKSBjYW4gaGF2ZSBvcHRpb25hbGx5IGEgcHJlY2lzaW9uIChgZmxvYXQpIG9yIGFuIGFjY3VyYWN5IGRlZmluaXRpb25cbiAgLy8gKGBgZmxvYXQpLiBOb3RlOiB3aGlsZSAxLjJgIGlzIHBvc3NpYmxlIDEuMmBgIGlzIG5vdC4gQXQgdGhlIGVuZCBhbiBleHBvbmVudCAoZmxvYXQqXisxMikgY2FuIGZvbGxvdy5cbiAgaWYgKHN0cmVhbS5tYXRjaChyZUZsb2F0Rm9ybSwgdHJ1ZSwgZmFsc2UpKSB7XG4gICAgcmV0dXJuICdudW1iZXInO1xuICB9XG5cbiAgLyogSW5bMjNdIGFuZCBPdXRbMzRdICovXG4gIGlmIChzdHJlYW0ubWF0Y2goLyg/OklufE91dClcXFtbMC05XSpcXF0vLCB0cnVlLCBmYWxzZSkpIHtcbiAgICByZXR1cm4gJ2F0b20nO1xuICB9XG5cbiAgLy8gdXNhZ2VcbiAgaWYgKHN0cmVhbS5tYXRjaCgvKFthLXpBLVpcXCRdW2EtekEtWjAtOVxcJF0qKD86YFthLXpBLVowLTlcXCRdKykqOjp1c2FnZSkvLCB0cnVlLCBmYWxzZSkpIHtcbiAgICByZXR1cm4gJ21ldGEnO1xuICB9XG5cbiAgLy8gbWVzc2FnZVxuICBpZiAoc3RyZWFtLm1hdGNoKC8oW2EtekEtWlxcJF1bYS16QS1aMC05XFwkXSooPzpgW2EtekEtWjAtOVxcJF0rKSo6OlthLXpBLVpcXCRdW2EtekEtWjAtOVxcJF0qKTo/LywgdHJ1ZSwgZmFsc2UpKSB7XG4gICAgcmV0dXJuICdzdHJpbmcuc3BlY2lhbCc7XG4gIH1cblxuICAvLyB0aGlzIG1ha2VzIGEgbG9vay1haGVhZCBtYXRjaCBmb3Igc29tZXRoaW5nIGxpa2UgdmFyaWFibGU6e19JbnRlZ2VyfVxuICAvLyB0aGUgbWF0Y2ggaXMgdGhlbiBmb3J3YXJkZWQgdG8gdGhlIG1tYS1wYXR0ZXJucyB0b2tlbml6ZXIuXG4gIGlmIChzdHJlYW0ubWF0Y2goLyhbYS16QS1aXFwkXVthLXpBLVowLTlcXCRdKlxccyo6KSg/Oig/OlthLXpBLVpcXCRdW2EtekEtWjAtOVxcJF0qKXwoPzpbXjo9Pn5AXFxeXFwmXFwqXFwpXFxbXFxdJ1xcPyxcXHxdKSkuKi8sIHRydWUsIGZhbHNlKSkge1xuICAgIHJldHVybiAndmFyaWFibGVOYW1lLnNwZWNpYWwnO1xuICB9XG5cbiAgLy8gY2F0Y2ggdmFyaWFibGVzIHdoaWNoIGFyZSB1c2VkIHRvZ2V0aGVyIHdpdGggQmxhbmsgKF8pLCBCbGFua1NlcXVlbmNlIChfXykgb3IgQmxhbmtOdWxsU2VxdWVuY2UgKF9fXylcbiAgLy8gQ2Fubm90IHN0YXJ0IHdpdGggYSBudW1iZXIsIGJ1dCBjYW4gaGF2ZSBudW1iZXJzIGF0IGFueSBvdGhlciBwb3NpdGlvbi4gRXhhbXBsZXNcbiAgLy8gYmx1Yl9fSW50ZWdlciwgYTFfLCBiMzRfSW50ZWdlcjMyXG4gIGlmIChzdHJlYW0ubWF0Y2goL1thLXpBLVpcXCRdW2EtekEtWjAtOVxcJF0qXytbYS16QS1aXFwkXVthLXpBLVowLTlcXCRdKi8sIHRydWUsIGZhbHNlKSkge1xuICAgIHJldHVybiAndmFyaWFibGVOYW1lLnNwZWNpYWwnO1xuICB9XG4gIGlmIChzdHJlYW0ubWF0Y2goL1thLXpBLVpcXCRdW2EtekEtWjAtOVxcJF0qXysvLCB0cnVlLCBmYWxzZSkpIHtcbiAgICByZXR1cm4gJ3ZhcmlhYmxlTmFtZS5zcGVjaWFsJztcbiAgfVxuICBpZiAoc3RyZWFtLm1hdGNoKC9fK1thLXpBLVpcXCRdW2EtekEtWjAtOVxcJF0qLywgdHJ1ZSwgZmFsc2UpKSB7XG4gICAgcmV0dXJuICd2YXJpYWJsZU5hbWUuc3BlY2lhbCc7XG4gIH1cblxuICAvLyBOYW1lZCBjaGFyYWN0ZXJzIGluIE1hdGhlbWF0aWNhLCBsaWtlIFxcW0dhbW1hXS5cbiAgaWYgKHN0cmVhbS5tYXRjaCgvXFxcXFxcW1thLXpBLVpcXCRdW2EtekEtWjAtOVxcJF0qXFxdLywgdHJ1ZSwgZmFsc2UpKSB7XG4gICAgcmV0dXJuICdjaGFyYWN0ZXInO1xuICB9XG5cbiAgLy8gTWF0Y2ggYWxsIGJyYWNlcyBzZXBhcmF0ZWx5XG4gIGlmIChzdHJlYW0ubWF0Y2goLyg/OlxcW3xcXF18e3x9fFxcKHxcXCkpLywgdHJ1ZSwgZmFsc2UpKSB7XG4gICAgcmV0dXJuICdicmFja2V0JztcbiAgfVxuXG4gIC8vIENhdGNoIFNsb3RzICgjLCAjIywgIzMsICMjOSBhbmQgdGhlIFYxMCBuYW1lZCBzbG90cyAjbmFtZSkuIEkgaGF2ZSBuZXZlciBzZWVuIHNvbWVvbmUgdXNpbmcgbW9yZSB0aGFuIG9uZSBkaWdpdCBhZnRlciAjLCBzbyB3ZSBtYXRjaFxuICAvLyBvbmx5IG9uZS5cbiAgaWYgKHN0cmVhbS5tYXRjaCgvKD86I1thLXpBLVpcXCRdW2EtekEtWjAtOVxcJF0qfCMrWzAtOV0/KS8sIHRydWUsIGZhbHNlKSkge1xuICAgIHJldHVybiAndmFyaWFibGVOYW1lLmNvbnN0YW50JztcbiAgfVxuXG4gIC8vIExpdGVyYWxzIGxpa2UgdmFyaWFibGVzLCBrZXl3b3JkcywgZnVuY3Rpb25zXG4gIGlmIChzdHJlYW0ubWF0Y2gocmVJZEluQ29udGV4dCwgdHJ1ZSwgZmFsc2UpKSB7XG4gICAgcmV0dXJuICdrZXl3b3JkJztcbiAgfVxuXG4gIC8vIG9wZXJhdG9ycy4gTm90ZSB0aGF0IG9wZXJhdG9ycyBsaWtlIEBAIG9yIC87IGFyZSBtYXRjaGVkIHNlcGFyYXRlbHkgZm9yIGVhY2ggc3ltYm9sLlxuICBpZiAoc3RyZWFtLm1hdGNoKC8oPzpcXFxcfFxcK3xcXC18XFwqfFxcL3wsfDt8XFwufDp8QHx+fD18Pnw8fCZ8XFx8fF98YHwnfFxcXnxcXD98IXwlKS8sIHRydWUsIGZhbHNlKSkge1xuICAgIHJldHVybiAnb3BlcmF0b3InO1xuICB9XG5cbiAgLy8gZXZlcnl0aGluZyBlbHNlIGlzIGFuIGVycm9yXG4gIHN0cmVhbS5uZXh0KCk7IC8vIGFkdmFuY2UgdGhlIHN0cmVhbS5cbiAgcmV0dXJuICdlcnJvcic7XG59XG5cbmZ1bmN0aW9uIHRva2VuU3RyaW5nKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5leHQsIGVuZCA9IGZhbHNlLCBlc2NhcGVkID0gZmFsc2U7XG4gIHdoaWxlICgobmV4dCA9IHN0cmVhbS5uZXh0KCkpICE9IG51bGwpIHtcbiAgICBpZiAobmV4dCA9PT0gJ1wiJyAmJiAhZXNjYXBlZCkge1xuICAgICAgZW5kID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBlc2NhcGVkID0gIWVzY2FwZWQgJiYgbmV4dCA9PT0gJ1xcXFwnO1xuICB9XG4gIGlmIChlbmQgJiYgIWVzY2FwZWQpIHtcbiAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgfVxuICByZXR1cm4gJ3N0cmluZyc7XG59O1xuXG5mdW5jdGlvbiB0b2tlbkNvbW1lbnQoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgcHJldiwgbmV4dDtcbiAgd2hpbGUoc3RhdGUuY29tbWVudExldmVsID4gMCAmJiAobmV4dCA9IHN0cmVhbS5uZXh0KCkpICE9IG51bGwpIHtcbiAgICBpZiAocHJldiA9PT0gJygnICYmIG5leHQgPT09ICcqJykgc3RhdGUuY29tbWVudExldmVsKys7XG4gICAgaWYgKHByZXYgPT09ICcqJyAmJiBuZXh0ID09PSAnKScpIHN0YXRlLmNvbW1lbnRMZXZlbC0tO1xuICAgIHByZXYgPSBuZXh0O1xuICB9XG4gIGlmIChzdGF0ZS5jb21tZW50TGV2ZWwgPD0gMCkge1xuICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICB9XG4gIHJldHVybiAnY29tbWVudCc7XG59XG5cbmV4cG9ydCBjb25zdCBtYXRoZW1hdGljYSA9IHtcbiAgc3RhcnRTdGF0ZTogZnVuY3Rpb24oKSB7cmV0dXJuIHt0b2tlbml6ZTogdG9rZW5CYXNlLCBjb21tZW50TGV2ZWw6IDB9O30sXG4gIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHN0cmVhbS5lYXRTcGFjZSgpKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSk7XG4gIH0sXG4gIGxhbmd1YWdlRGF0YToge1xuICAgIGNvbW1lbnRUb2tlbnM6IHtibG9jazoge29wZW46IFwiKCpcIiwgY2xvc2U6IFwiKilcIn19XG4gIH1cbn1cblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@codemirror/legacy-modes/mode/mathematica.js\n");

/***/ })

}]);