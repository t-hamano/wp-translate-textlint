(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{409:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pig", function() { return pig; });\nfunction words(str) {\n  var obj = {}, words = str.split(" ");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\n// builtin funcs taken from trunk revision 1303237\nvar pBuiltins = "ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL "\n    + "CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS "\n    + "DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG "\n    + "FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN "\n    + "INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER "\n    + "ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS "\n    + "LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  "\n    + "PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE "\n    + "SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG "\n    + "TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER ";\n\n// taken from QueryLexer.g\nvar pKeywords = "VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP "\n    + "JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL "\n    + "PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE "\n    + "SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE "\n    + "NEQ MATCHES TRUE FALSE DUMP";\n\n// data types\nvar pTypes = "BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP ";\n\nvar builtins = words(pBuiltins), keywords = words(pKeywords), types = words(pTypes)\n\nvar isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction tokenComment(stream, state) {\n  var isEnd = false;\n  var ch;\n  while(ch = stream.next()) {\n    if(ch == "/" && isEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    isEnd = (ch == "*");\n  }\n  return "comment";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true; break;\n      }\n      escaped = !escaped && next == "\\\\";\n    }\n    if (end || !escaped)\n      state.tokenize = tokenBase;\n    return "error";\n  };\n}\n\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n\n  // is a start of string?\n  if (ch == \'"\' || ch == "\'")\n    return chain(stream, state, tokenString(ch));\n  // is it one of the special chars\n  else if(/[\\[\\]{}\\(\\),;\\.]/.test(ch))\n    return null;\n  // is it a number?\n  else if(/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return "number";\n  }\n  // multi line comment or operator\n  else if (ch == "/") {\n    if (stream.eat("*")) {\n      return chain(stream, state, tokenComment);\n    }\n    else {\n      stream.eatWhile(isOperatorChar);\n      return "operator";\n    }\n  }\n  // single line comment or operator\n  else if (ch=="-") {\n    if(stream.eat("-")){\n      stream.skipToEnd();\n      return "comment";\n    }\n    else {\n      stream.eatWhile(isOperatorChar);\n      return "operator";\n    }\n  }\n  // is it an operator\n  else if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return "operator";\n  }\n  else {\n    // get the while word\n    stream.eatWhile(/[\\w\\$_]/);\n    // is it one of the listed keywords?\n    if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n      //keywords can be used as variables like flatten(group), group.$0 etc..\n      if (!stream.eat(")") && !stream.eat("."))\n        return "keyword";\n    }\n    // is it one of the builtin functions?\n    if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase()))\n      return "builtin";\n    // is it one of the listed types?\n    if (types && types.propertyIsEnumerable(stream.current().toUpperCase()))\n      return "type";\n    // default is a \'variable\'\n    return "variable";\n  }\n}\n\n// Interface\nconst pig = {\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    if(stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  },\n\n  languageData: {\n    autocomplete: (pBuiltins + pTypes + pKeywords).split(" ")\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvcGlnLmpzPzAzMzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0EsY0FBYztBQUNkLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsTUFBTTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0MDkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB3b3JkcyhzdHIpIHtcbiAgdmFyIG9iaiA9IHt9LCB3b3JkcyA9IHN0ci5zcGxpdChcIiBcIik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyArK2kpIG9ialt3b3Jkc1tpXV0gPSB0cnVlO1xuICByZXR1cm4gb2JqO1xufVxuXG4vLyBidWlsdGluIGZ1bmNzIHRha2VuIGZyb20gdHJ1bmsgcmV2aXNpb24gMTMwMzIzN1xudmFyIHBCdWlsdGlucyA9IFwiQUJTIEFDT1MgQVJJVFkgQVNJTiBBVEFOIEFWRyBCQUdTSVpFIEJJTlNUT1JBR0UgQkxPT00gQlVJTERCTE9PTSBDQlJUIENFSUwgXCJcbiAgICArIFwiQ09OQ0FUIENPUiBDT1MgQ09TSCBDT1VOVCBDT1VOVF9TVEFSIENPViBDT05TVEFOVFNJWkUgQ1VCRURJTUVOU0lPTlMgRElGRiBESVNUSU5DVCBET1VCTEVBQlMgXCJcbiAgICArIFwiRE9VQkxFQVZHIERPVUJMRUJBU0UgRE9VQkxFTUFYIERPVUJMRU1JTiBET1VCTEVST1VORCBET1VCTEVTVU0gRVhQIEZMT09SIEZMT0FUQUJTIEZMT0FUQVZHIFwiXG4gICAgKyBcIkZMT0FUTUFYIEZMT0FUTUlOIEZMT0FUUk9VTkQgRkxPQVRTVU0gR0VORVJJQ0lOVk9LRVIgSU5ERVhPRiBJTlRBQlMgSU5UQVZHIElOVE1BWCBJTlRNSU4gXCJcbiAgICArIFwiSU5UU1VNIElOVk9LRUZPUkRPVUJMRSBJTlZPS0VGT1JGTE9BVCBJTlZPS0VGT1JJTlQgSU5WT0tFRk9STE9ORyBJTlZPS0VGT1JTVFJJTkcgSU5WT0tFUiBcIlxuICAgICsgXCJJU0VNUFRZIEpTT05MT0FERVIgSlNPTk1FVEFEQVRBIEpTT05TVE9SQUdFIExBU1RfSU5ERVhfT0YgTENGSVJTVCBMT0cgTE9HMTAgTE9XRVIgTE9OR0FCUyBcIlxuICAgICsgXCJMT05HQVZHIExPTkdNQVggTE9OR01JTiBMT05HU1VNIE1BWCBNSU4gTUFQU0laRSBNT05JVE9SRURVREYgTk9OREVURVJNSU5JU1RJQyBPVVRQVVRTQ0hFTUEgIFwiXG4gICAgKyBcIlBJR1NUT1JBR0UgUElHU1RSRUFNSU5HIFJBTkRPTSBSRUdFWF9FWFRSQUNUIFJFR0VYX0VYVFJBQ1RfQUxMIFJFUExBQ0UgUk9VTkQgU0lOIFNJTkggU0laRSBcIlxuICAgICsgXCJTUVJUIFNUUlNQTElUIFNVQlNUUklORyBTVU0gU1RSSU5HQ09OQ0FUIFNUUklOR01BWCBTVFJJTkdNSU4gU1RSSU5HU0laRSBUQU4gVEFOSCBUT0JBRyBcIlxuICAgICsgXCJUT0tFTklaRSBUT01BUCBUT1AgVE9UVVBMRSBUUklNIFRFWFRMT0FERVIgVFVQTEVTSVpFIFVDRklSU1QgVVBQRVIgVVRGOFNUT1JBR0VDT05WRVJURVIgXCI7XG5cbi8vIHRha2VuIGZyb20gUXVlcnlMZXhlci5nXG52YXIgcEtleXdvcmRzID0gXCJWT0lEIElNUE9SVCBSRVRVUk5TIERFRklORSBMT0FEIEZJTFRFUiBGT1JFQUNIIE9SREVSIENVQkUgRElTVElOQ1QgQ09HUk9VUCBcIlxuICAgICsgXCJKT0lOIENST1NTIFVOSU9OIFNQTElUIElOVE8gSUYgT1RIRVJXSVNFIEFMTCBBUyBCWSBVU0lORyBJTk5FUiBPVVRFUiBPTlNDSEVNQSBQQVJBTExFTCBcIlxuICAgICsgXCJQQVJUSVRJT04gR1JPVVAgQU5EIE9SIE5PVCBHRU5FUkFURSBGTEFUVEVOIEFTQyBERVNDIElTIFNUUkVBTSBUSFJPVUdIIFNUT1JFIE1BUFJFRFVDRSBcIlxuICAgICsgXCJTSElQIENBQ0hFIElOUFVUIE9VVFBVVCBTVERFUlJPUiBTVERJTiBTVERPVVQgTElNSVQgU0FNUExFIExFRlQgUklHSFQgRlVMTCBFUSBHVCBMVCBHVEUgTFRFIFwiXG4gICAgKyBcIk5FUSBNQVRDSEVTIFRSVUUgRkFMU0UgRFVNUFwiO1xuXG4vLyBkYXRhIHR5cGVzXG52YXIgcFR5cGVzID0gXCJCT09MRUFOIElOVCBMT05HIEZMT0FUIERPVUJMRSBDSEFSQVJSQVkgQllURUFSUkFZIEJBRyBUVVBMRSBNQVAgXCI7XG5cbnZhciBidWlsdGlucyA9IHdvcmRzKHBCdWlsdGlucyksIGtleXdvcmRzID0gd29yZHMocEtleXdvcmRzKSwgdHlwZXMgPSB3b3JkcyhwVHlwZXMpXG5cbnZhciBpc09wZXJhdG9yQ2hhciA9IC9bKitcXC0lPD49Jj86XFwvIXxdLztcblxuZnVuY3Rpb24gY2hhaW4oc3RyZWFtLCBzdGF0ZSwgZikge1xuICBzdGF0ZS50b2tlbml6ZSA9IGY7XG4gIHJldHVybiBmKHN0cmVhbSwgc3RhdGUpO1xufVxuXG5mdW5jdGlvbiB0b2tlbkNvbW1lbnQoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgaXNFbmQgPSBmYWxzZTtcbiAgdmFyIGNoO1xuICB3aGlsZShjaCA9IHN0cmVhbS5uZXh0KCkpIHtcbiAgICBpZihjaCA9PSBcIi9cIiAmJiBpc0VuZCkge1xuICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkJhc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaXNFbmQgPSAoY2ggPT0gXCIqXCIpO1xuICB9XG4gIHJldHVybiBcImNvbW1lbnRcIjtcbn1cblxuZnVuY3Rpb24gdG9rZW5TdHJpbmcocXVvdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSwgc3RhdGUpIHtcbiAgICB2YXIgZXNjYXBlZCA9IGZhbHNlLCBuZXh0LCBlbmQgPSBmYWxzZTtcbiAgICB3aGlsZSgobmV4dCA9IHN0cmVhbS5uZXh0KCkpICE9IG51bGwpIHtcbiAgICAgIGlmIChuZXh0ID09IHF1b3RlICYmICFlc2NhcGVkKSB7XG4gICAgICAgIGVuZCA9IHRydWU7IGJyZWFrO1xuICAgICAgfVxuICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkICYmIG5leHQgPT0gXCJcXFxcXCI7XG4gICAgfVxuICAgIGlmIChlbmQgfHwgIWVzY2FwZWQpXG4gICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgICByZXR1cm4gXCJlcnJvclwiO1xuICB9O1xufVxuXG5cbmZ1bmN0aW9uIHRva2VuQmFzZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBjaCA9IHN0cmVhbS5uZXh0KCk7XG5cbiAgLy8gaXMgYSBzdGFydCBvZiBzdHJpbmc/XG4gIGlmIChjaCA9PSAnXCInIHx8IGNoID09IFwiJ1wiKVxuICAgIHJldHVybiBjaGFpbihzdHJlYW0sIHN0YXRlLCB0b2tlblN0cmluZyhjaCkpO1xuICAvLyBpcyBpdCBvbmUgb2YgdGhlIHNwZWNpYWwgY2hhcnNcbiAgZWxzZSBpZigvW1xcW1xcXXt9XFwoXFwpLDtcXC5dLy50ZXN0KGNoKSlcbiAgICByZXR1cm4gbnVsbDtcbiAgLy8gaXMgaXQgYSBudW1iZXI/XG4gIGVsc2UgaWYoL1xcZC8udGVzdChjaCkpIHtcbiAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHdcXC5dLyk7XG4gICAgcmV0dXJuIFwibnVtYmVyXCI7XG4gIH1cbiAgLy8gbXVsdGkgbGluZSBjb21tZW50IG9yIG9wZXJhdG9yXG4gIGVsc2UgaWYgKGNoID09IFwiL1wiKSB7XG4gICAgaWYgKHN0cmVhbS5lYXQoXCIqXCIpKSB7XG4gICAgICByZXR1cm4gY2hhaW4oc3RyZWFtLCBzdGF0ZSwgdG9rZW5Db21tZW50KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzdHJlYW0uZWF0V2hpbGUoaXNPcGVyYXRvckNoYXIpO1xuICAgICAgcmV0dXJuIFwib3BlcmF0b3JcIjtcbiAgICB9XG4gIH1cbiAgLy8gc2luZ2xlIGxpbmUgY29tbWVudCBvciBvcGVyYXRvclxuICBlbHNlIGlmIChjaD09XCItXCIpIHtcbiAgICBpZihzdHJlYW0uZWF0KFwiLVwiKSl7XG4gICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgICByZXR1cm4gXCJjb21tZW50XCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc3RyZWFtLmVhdFdoaWxlKGlzT3BlcmF0b3JDaGFyKTtcbiAgICAgIHJldHVybiBcIm9wZXJhdG9yXCI7XG4gICAgfVxuICB9XG4gIC8vIGlzIGl0IGFuIG9wZXJhdG9yXG4gIGVsc2UgaWYgKGlzT3BlcmF0b3JDaGFyLnRlc3QoY2gpKSB7XG4gICAgc3RyZWFtLmVhdFdoaWxlKGlzT3BlcmF0b3JDaGFyKTtcbiAgICByZXR1cm4gXCJvcGVyYXRvclwiO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIGdldCB0aGUgd2hpbGUgd29yZFxuICAgIHN0cmVhbS5lYXRXaGlsZSgvW1xcd1xcJF9dLyk7XG4gICAgLy8gaXMgaXQgb25lIG9mIHRoZSBsaXN0ZWQga2V5d29yZHM/XG4gICAgaWYgKGtleXdvcmRzICYmIGtleXdvcmRzLnByb3BlcnR5SXNFbnVtZXJhYmxlKHN0cmVhbS5jdXJyZW50KCkudG9VcHBlckNhc2UoKSkpIHtcbiAgICAgIC8va2V5d29yZHMgY2FuIGJlIHVzZWQgYXMgdmFyaWFibGVzIGxpa2UgZmxhdHRlbihncm91cCksIGdyb3VwLiQwIGV0Yy4uXG4gICAgICBpZiAoIXN0cmVhbS5lYXQoXCIpXCIpICYmICFzdHJlYW0uZWF0KFwiLlwiKSlcbiAgICAgICAgcmV0dXJuIFwia2V5d29yZFwiO1xuICAgIH1cbiAgICAvLyBpcyBpdCBvbmUgb2YgdGhlIGJ1aWx0aW4gZnVuY3Rpb25zP1xuICAgIGlmIChidWlsdGlucyAmJiBidWlsdGlucy5wcm9wZXJ0eUlzRW51bWVyYWJsZShzdHJlYW0uY3VycmVudCgpLnRvVXBwZXJDYXNlKCkpKVxuICAgICAgcmV0dXJuIFwiYnVpbHRpblwiO1xuICAgIC8vIGlzIGl0IG9uZSBvZiB0aGUgbGlzdGVkIHR5cGVzP1xuICAgIGlmICh0eXBlcyAmJiB0eXBlcy5wcm9wZXJ0eUlzRW51bWVyYWJsZShzdHJlYW0uY3VycmVudCgpLnRvVXBwZXJDYXNlKCkpKVxuICAgICAgcmV0dXJuIFwidHlwZVwiO1xuICAgIC8vIGRlZmF1bHQgaXMgYSAndmFyaWFibGUnXG4gICAgcmV0dXJuIFwidmFyaWFibGVcIjtcbiAgfVxufVxuXG4vLyBJbnRlcmZhY2VcbmV4cG9ydCBjb25zdCBwaWcgPSB7XG4gIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbml6ZTogdG9rZW5CYXNlLFxuICAgICAgc3RhcnRPZkxpbmU6IHRydWVcbiAgICB9O1xuICB9LFxuXG4gIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYoc3RyZWFtLmVhdFNwYWNlKCkpIHJldHVybiBudWxsO1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpO1xuICAgIHJldHVybiBzdHlsZTtcbiAgfSxcblxuICBsYW5ndWFnZURhdGE6IHtcbiAgICBhdXRvY29tcGxldGU6IChwQnVpbHRpbnMgKyBwVHlwZXMgKyBwS2V5d29yZHMpLnNwbGl0KFwiIFwiKVxuICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///409\n')}}]);